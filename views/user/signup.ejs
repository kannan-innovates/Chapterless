<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sign Up - Chapterless</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Pacifico&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <link rel="stylesheet" href="/styles/user/signupPage.css" />
    <style>
      /* Additional validation styling */
      .password-requirements {
        font-size: 0.8rem;
        color: #6c757d;
        margin-top: 0.25rem;
        margin-bottom: 0.5rem;
      }

      .is-valid {
        border-color: #198754 !important;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        padding-right: calc(1.5em + 0.75rem) !important;
      }

      .is-invalid {
        border-color: #dc3545 !important;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        padding-right: calc(1.5em + 0.75rem) !important;
      }
    </style>
  </head>
  <body
    class="paper-texture d-flex align-items-center justify-content-center min-vh-100 py-3"
  >
    <div class="container">
      <div class="signup-container mx-auto bg-white row">
        <!-- Left image side -->
        <div class="col-md-5 p-0 image-side d-none d-md-block">
          <div class="overlay">
            <div class="text-white">
              <h2 class="h3 fw-bold mb-1">Where Stories Find Lost Souls</h2>
              <p class="mb-0 small">Join our literary journey today.</p>
            </div>
          </div>
        </div>

        <!-- Right form side -->
        <div class="col-12 col-md-7 form-side">
          <div class="text-center mb-3">
            <div class="d-flex align-items-center justify-content-center mb-2">
              <img
                src="../../assets/harryPotter.jpeg"
                alt="Chapterless Logo"
                class="me-2"
                height="30"
              />
              <span class="logo-text fs-4">Chapterless</span>
            </div>
            <h2 class="fw-bold h4">Create an account</h2>
            <p class="text-muted small mb-3">
              Sign up to start your reading journey
            </p>
          </div>

          <form id="userSignup" method="post">
            <div class="compact-mb">
              <label for="fullName" class="form-label">Full Name</label>
              <input
                type="text"
                name="fullName"
                class="form-control form-control-sm"
                id="fullName"
                placeholder="Enter your full name"
              />
              <div id="fullNameError" class="text-danger small mt-1"></div>
            </div>
            <div class="compact-mb">
              <label for="email" class="form-label">Email Address</label>
              <input
                type="email"
                name="email"
                class="form-control form-control-sm"
                id="email"
                placeholder="Enter your email"
              />
              <div id="emailError" class="text-danger small mt-1"></div>
            </div>
            <div class="compact-mb">
              <label for="phoneNumber" class="form-label">Phone Number</label>
              <input
                type="tel"
                name="phoneNumber"
                class="form-control form-control-sm"
                id="phoneNumber"
                placeholder="Enter your phone number"
              />
              <div id="phoneNumberError" class="text-danger small mt-1"></div>
            </div>
            <div class="compact-mb">
              <label for="password" class="form-label">Password</label>
              <input
                type="password"
                name="password"
                class="form-control form-control-sm"
                id="password"
                placeholder="Create a password"
              />
              <div class="password-requirements small" id="passwordRequirements">
                Password must be at least 8 characters with uppercase letter, lowercase letter, numbers, and special characters (@$!%*?&_-#)
              </div>
              <div id="passwordError" class="text-danger small mt-1"></div>
            </div>
            <div class="compact-mb">
              <label for="confirmPassword" class="form-label"
                >Confirm Password</label
              >
              <input
                type="password"
                name="confirmPassword"
                class="form-control form-control-sm"
                id="confirmPassword"
                placeholder="Confirm your password"
              />
              <div
                id="confirmPasswordError"
                class="text-danger small mt-1"
              ></div>
            </div>

            <button
              type="submit"
              class="btn btn-primary btn-sm w-100 mb-2 py-2"
              id="submitButton"
            >
              Sign Up
            </button>

            <div class="divider">
              <span>or</span>
            </div>

            <a href="/auth/google"
              type="button"
              class="btn btn-outline-secondary btn-sm w-100 mb-3 py-2"
            >
              <i class="ri-google-fill me-2"></i> Continue with Google
            </a>

            <div class="text-center">
              <p class="mb-0 small">
                Already have an account?
                <a href="/login" class="text-decoration-none fw-medium">Log in</a>
              </p>
              <p class="mb-0 small mt-2">
                Have a referral code?
                <a href="#" class="text-decoration-none fw-medium" data-bs-toggle="modal" data-bs-target="#referralModal">Enter here</a>
              </p>
            </div>
          </form>
        </div>
      </div>

      <div class="text-center mt-2">
        <p class="text-muted small">
          &copy; 2025 Chapterless. All rights reserved.
        </p>
      </div>
    </div>

    <!-- Referral Modal -->
    <div class="modal fade" id="referralModal" tabindex="-1" aria-labelledby="referralModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header border-0 pb-0">
            <h5 class="modal-title" id="referralModalLabel">
              <i class="ri-gift-line me-2 text-success"></i>Enter Referral Code
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body pt-2">
            <div class="text-center mb-3">
              <div class="bg-success bg-opacity-10 rounded-circle mx-auto mb-2 d-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                <i class="ri-gift-fill text-success fs-3"></i>
              </div>
              <p class="text-muted small mb-0">Get â‚¹50 in your wallet when you use a friend's referral code!</p>
            </div>
            <form id="referralForm">
              <div class="mb-3">
                <label for="referralCode" class="form-label">Referral Code</label>
                <input
                  type="text"
                  class="form-control"
                  id="referralCodeInput"
                  placeholder="Enter referral code (e.g., SAVE30USER123)"
                  style="text-transform: uppercase;"
                />
                <div id="referralCodeError" class="text-danger small mt-1"></div>
                <div id="referralCodeSuccess" class="text-success small mt-1"></div>
              </div>
            </form>
          </div>
          <div class="modal-footer border-0 pt-0">
            <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-dismiss="modal">Skip</button>
            <button type="button" class="btn btn-success btn-sm" id="applyReferralBtn">
              <i class="ri-check-line me-1"></i>Apply Code
            </button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
     // Validation helper functions
function setInvalid(element) {
  element.classList.add('is-invalid');
  element.classList.remove('is-valid');
}

function setValid(element) {
  element.classList.add('is-valid');
  element.classList.remove('is-invalid');
}

// Enhanced validation functions
function validateFullName(fullName) {
  const trimmedName = fullName.trim();
  if (trimmedName.length < 3) return false;

  const nameWords = trimmedName.split(' ').filter(word => word.length > 0);
  if (nameWords.length < 2) return false;

  return /^[A-Za-z\s'-]+$/.test(trimmedName);
}

function validateEmail(email) {
  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  if (!emailRegex.test(email)) return false;

  // Check for disposable email domains
  const disposableDomains = ['mailinator.com', 'tempmail.com', 'temp-mail.org', 'guerrillamail.com', 'yopmail.com', 'sharklasers.com'];
  const domain = email.split('@')[1];
  return !disposableDomains.includes(domain);
}

function validatePhoneNumber(phoneNumber) {
  // Remove any non-digit characters
  const cleanPhone = phoneNumber.replace(/\D/g, '');

  // Check length (10 digits standard or 11-15 with country code)
  if (cleanPhone.length !== 10 && (cleanPhone.length < 11 || cleanPhone.length > 15)) {
    return false;
  }

  // Check for obviously fake patterns
  if (/^(.)\1+$/.test(cleanPhone) || /^0{10}$/.test(cleanPhone) || /^1{10}$/.test(cleanPhone)) {
    return false;
  }

  return true;
}

function validatePassword(password) {
  const minLength = password.length >= 8;
  const hasUppercase = /[A-Z]/.test(password);
  const hasLowercase = /[a-z]/.test(password);
  const hasNumber = /\d/.test(password);
  const hasSpecial = /[@$!%*?&_\-#]/.test(password);

  // Check for common patterns
  const hasCommonPattern = /123456|password|qwerty/i.test(password);

  return minLength && hasUppercase && hasLowercase && hasNumber && hasSpecial && !hasCommonPattern;
}

// Real-time validation events
document.getElementById('fullName').addEventListener('input', function() {
  const fullName = this.value.trim();
  const fullNameError = document.getElementById('fullNameError');

  if (fullName === '') {
    fullNameError.textContent = '';
    this.classList.remove('is-invalid');
    this.classList.remove('is-valid');
  } else if (!validateFullName(fullName)) {
    const nameWords = fullName.split(' ').filter(word => word.length > 0);
    if (nameWords.length < 2) {
      fullNameError.textContent = 'Please provide both first and last name.';
    } else if (!/^[A-Za-z\s'-]+$/.test(fullName)) {
      fullNameError.textContent = 'Name contains invalid characters.';
    } else {
      fullNameError.textContent = 'Full name must be at least 3 characters.';
    }
    setInvalid(this);
  } else {
    fullNameError.textContent = '';
    setValid(this);
  }
});

document.getElementById('email').addEventListener('input', function() {
  const email = this.value.trim();
  const emailError = document.getElementById('emailError');

  if (email === '') {
    emailError.textContent = '';
    this.classList.remove('is-invalid');
    this.classList.remove('is-valid');
  } else if (!validateEmail(email)) {
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailRegex.test(email)) {
      emailError.textContent = 'Please enter a valid email address.';
    } else {
      emailError.textContent = 'Please use a non-disposable email address.';
    }
    setInvalid(this);
  } else {
    emailError.textContent = '';
    setValid(this);
  }
});

document.getElementById('phoneNumber').addEventListener('input', function() {
  const phoneNumber = this.value.trim();
  const phoneNumberError = document.getElementById('phoneNumberError');

  if (phoneNumber === '') {
    phoneNumberError.textContent = '';
    this.classList.remove('is-invalid');
    this.classList.remove('is-valid');
  } else if (!validatePhoneNumber(phoneNumber)) {
    const cleanPhone = phoneNumber.replace(/\D/g, '');

    if (/^(.)\1+$/.test(cleanPhone) || /^0{10}$/.test(cleanPhone) || /^1{10}$/.test(cleanPhone)) {
      phoneNumberError.textContent = 'Please enter a valid phone number.';
    } else {
      phoneNumberError.textContent = 'Phone number must be 10 digits or include a valid country code.';
    }
    setInvalid(this);
  } else {
    phoneNumberError.textContent = '';
    setValid(this);
  }
});

document.getElementById('password').addEventListener('input', function() {
  const password = this.value;
  const passwordError = document.getElementById('passwordError');

  if (password === '') {
    passwordError.textContent = '';
    this.classList.remove('is-invalid');
    this.classList.remove('is-valid');
  } else if (!validatePassword(password)) {
    // Detailed feedback
    const minLength = password.length >= 8;
    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasNumber = /\d/.test(password);
    const hasSpecial = /[@$!%*?&_\-#]/.test(password);
    const hasCommonPattern = /123456|password|qwerty/i.test(password);

    let errorMsg = "Password must include: ";
    const missing = [];

    if (!minLength) missing.push("at least 8 characters");
    if (!hasUppercase) missing.push("uppercase letter");
    if (!hasLowercase) missing.push("lowercase letter");
    if (!hasNumber) missing.push("numbers");
    if (!hasSpecial) missing.push("special characters");
    if (hasCommonPattern) missing.push("avoid common patterns (123456, password, qwerty)");

    passwordError.textContent = errorMsg + missing.join(", ");
    setInvalid(this);
  } else {
    passwordError.textContent = '';
    setValid(this);
  }

  // Also check confirm password if it has content
  const confirmPassword = document.getElementById('confirmPassword');
  if (confirmPassword.value) {
    if (password !== confirmPassword.value) {
      document.getElementById('confirmPasswordError').textContent = 'Passwords do not match.';
      setInvalid(confirmPassword);
    } else {
      document.getElementById('confirmPasswordError').textContent = '';
      setValid(confirmPassword);
    }
  }
});

document.getElementById('confirmPassword').addEventListener('input', function() {
  const confirmPassword = this.value;
  const password = document.getElementById('password').value;
  const confirmPasswordError = document.getElementById('confirmPasswordError');

  if (confirmPassword === '') {
    confirmPasswordError.textContent = '';
    this.classList.remove('is-invalid');
    this.classList.remove('is-valid');
  } else if (password !== confirmPassword) {
    confirmPasswordError.textContent = 'Passwords do not match.';
    setInvalid(this);
  } else {
    confirmPasswordError.textContent = '';
    setValid(this);
  }
});

// Form submission handler
document.getElementById("userSignup").addEventListener("submit", async (event) => {
  event.preventDefault();

  const fullName = document.getElementById("fullName").value.trim();
  const email = document.getElementById("email").value.trim();
  const phoneNumber = document.getElementById("phoneNumber").value.trim();
  const password = document.getElementById("password").value;
  const confirmPassword = document.getElementById("confirmPassword").value;

  // Clear previous errors
  document.getElementById("fullNameError").textContent = "";
  document.getElementById("emailError").textContent = "";
  document.getElementById("phoneNumberError").textContent = "";
  document.getElementById("passwordError").textContent = "";
  document.getElementById("confirmPasswordError").textContent = "";

  let isValid = true;

  // Validate all fields
  if (!fullName || !validateFullName(fullName)) {
    const nameWords = fullName.split(' ').filter(word => word.length > 0);
    if (nameWords.length < 2) {
      document.getElementById("fullNameError").textContent = "Please provide both first and last name.";
    } else {
      document.getElementById("fullNameError").textContent = "Full name must be at least 3 characters with valid characters.";
    }
    setInvalid(document.getElementById("fullName"));
    isValid = false;
  }

  if (!email || !validateEmail(email)) {
    document.getElementById("emailError").textContent = "Valid email is required (non-disposable).";
    setInvalid(document.getElementById("email"));
    isValid = false;
  }

  if (!phoneNumber || !validatePhoneNumber(phoneNumber)) {
    document.getElementById("phoneNumberError").textContent = "Valid phone number is required.";
    setInvalid(document.getElementById("phoneNumber"));
    isValid = false;
  }

  if (!password || !validatePassword(password)) {
    document.getElementById("passwordError").textContent =
      "Password must be at least 8 characters with uppercase, lowercase, numbers, and special characters.";
    setInvalid(document.getElementById("password"));
    isValid = false;
  }

  if (password !== confirmPassword) {
    document.getElementById("confirmPasswordError").textContent = "Passwords do not match.";
    setInvalid(document.getElementById("confirmPassword"));
    isValid = false;
  }

  if (isValid) {
    // Show loading state
    const submitButton = document.getElementById("submitButton");
    submitButton.disabled = true;
    submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Signing up...';

    try {
      const response = await fetch("/signup", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          fullName,
          email,
          phoneNumber,
          password,
          confirmPassword,
          referralCode: window.appliedReferralCode || null
        }),
      });

      const result = await response.json();
      submitButton.disabled = false;
      submitButton.textContent = "Sign Up";

      if (result.success) {
        Swal.fire({
          icon: "success",
          title: "Signup Successful",
          text: "Welcome to Chapterless!",
          confirmButtonColor: "#3085d6",
          confirmButtonText: "Proceed to Login",
        }).then(() => {
          window.location.href = '/verify-otp';
        });
      } else {
        // Handle validation errors from server
        if (result.errors) {
          const errors = result.errors;
          for (const field in errors) {
            const errorElement = document.getElementById(`${field}Error`);
            if (errorElement) {
              errorElement.textContent = errors[field];
              setInvalid(document.getElementById(field));
            }
          }
        } else {
          // Generic error
          Swal.fire({
            icon: "error",
            title: "Signup Failed",
            text: result.message || "Something went wrong!",
          });
        }
      }
    } catch (err) {
      console.log("Signup error:", err);
      submitButton.disabled = false;
      submitButton.textContent = "Sign Up";

      Swal.fire({
        icon: "error",
        title: "Error",
        text: "Server not responding. Try again later.",
      });
    }
  }
});

// Referral Modal Functionality
let appliedReferralCode = null;
window.appliedReferralCode = null;

const referralCodeInput = document.getElementById('referralCodeInput');
const referralCodeError = document.getElementById('referralCodeError');
const referralCodeSuccess = document.getElementById('referralCodeSuccess');
const applyReferralBtn = document.getElementById('applyReferralBtn');

// Real-time referral code validation
referralCodeInput.addEventListener('input', function() {
  const code = this.value.trim().toUpperCase();
  this.value = code;

  // Clear previous messages
  referralCodeError.textContent = '';
  referralCodeSuccess.textContent = '';

  if (code.length === 0) {
    applyReferralBtn.disabled = false;
    return;
  }

  // Basic validation
  if (code.length < 6) {
    referralCodeError.textContent = 'Referral code must be at least 6 characters';
    applyReferralBtn.disabled = true;
  } else {
    applyReferralBtn.disabled = false;
  }
});

// Apply referral code
applyReferralBtn.addEventListener('click', async function() {
  const code = referralCodeInput.value.trim().toUpperCase();

  if (!code) {
    // Skip referral
    bootstrap.Modal.getInstance(document.getElementById('referralModal')).hide();
    return;
  }

  // Show loading state
  const originalText = this.innerHTML;
  this.disabled = true;
  this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Validating...';

  try {
    const response = await fetch('/validate-referral', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ referralCode: code }),
    });

    const result = await response.json();

    if (result.success) {
      referralCodeSuccess.textContent = `âœ“ Valid referral code! You'll get â‚¹50 in your wallet.`;
      referralCodeError.textContent = '';
      appliedReferralCode = code;
      window.appliedReferralCode = code;

      // Show success and close modal after delay
      setTimeout(() => {
        bootstrap.Modal.getInstance(document.getElementById('referralModal')).hide();

        // Show success toast
        Swal.fire({
          icon: 'success',
          title: 'Referral Code Applied!',
          text: 'You\'ll receive â‚¹50 in your wallet after signup.',
          timer: 3000,
          showConfirmButton: false,
          toast: true,
          position: 'top-end'
        });
      }, 1500);
    } else {
      referralCodeError.textContent = result.message || 'Invalid referral code';
      referralCodeSuccess.textContent = '';
    }
  } catch (error) {
    console.error('Error validating referral code:', error);
    referralCodeError.textContent = 'Error validating referral code. Please try again.';
    referralCodeSuccess.textContent = '';
  }

  // Reset button
  this.disabled = false;
  this.innerHTML = originalText;
});

// Reset modal when closed
document.getElementById('referralModal').addEventListener('hidden.bs.modal', function() {
  if (!appliedReferralCode) {
    referralCodeInput.value = '';
    referralCodeError.textContent = '';
    referralCodeSuccess.textContent = '';
  }
});
    </script>
  </body>
</html>