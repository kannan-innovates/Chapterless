<%- include("../partials/user/header") %>

<div class="container py-5">
  <!-- Breadcrumbs -->
  <nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/user/dashboard">My Account</a></li>
      <li class="breadcrumb-item active" aria-current="page">My Profile</li>
    </ol>
  </nav>

  <div class="row g-4">
    <%- include("../partials/user/accountSidebar") %>

    <!-- Main Content -->
    <div class="col-lg-9">
      <div class="card border-0 shadow-sm mb-4">
        <div class="card-header bg-white p-4 border-0">
          <h4 class="mb-0">Personal Information</h4>
        </div>
        <div class="card-body p-4">
          <!-- Profile Image Section -->
          <div class="text-center mb-4">
            <div class="position-relative mx-auto mb-3" style="width: 120px; height: 120px;">
              <div class="profile-image-container">
                <img
                  id="profileImageMain"
                  src="<%= user.profileImage || '/api/placeholder/120/120' %>"
                  alt="Profile"
                  class="rounded-circle img-thumbnail"
                  onerror="this.src='/api/placeholder/120/120'; this.onerror=null;"
                />
                <div class="profile-image-overlay">
                  <label for="profileImageUpload" class="upload-icon">
                    <i class="bi bi-camera-fill"></i>
                  </label>
                  <input
                    type="file"
                    id="profileImageUpload"
                    accept="image/*"
                    class="d-none"
                  />
                </div>
              </div>
            </div>
          </div>

          <form id="profileForm">
            <div class="row g-3">
              <div class="col-md-12 mb-3">
                <label for="fullName" class="form-label">Full Name</label>
                <div class="input-group">
                  <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-person"></i>
                  </span>
                  <input
                    type="text"
                    class="form-control border-start-0"
                    id="fullName"
                    name="fullName"
                    value="<%= user.fullName %>"
                    placeholder="Enter your full name"
                  />
                </div>
                <div id="fullNameError" class="text-danger small mt-1"></div>
              </div>

              <div class="col-md-6 mb-3">
                <label for="email" class="form-label">Email Address</label>
                <div class="input-group">
                  <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-envelope"></i>
                  </span>
                  <input
                    type="email"
                    class="form-control bg-light border-start-0"
                    id="email"
                    name="email"
                    value="<%= user.email %>"
                    placeholder="example@gmail.com"
                    readonly
                  />
                </div>
                <small class="text-muted">Email cannot be edited directly</small>
              </div>

              <div class="col-md-6 mb-3">
                <label for="phone" class="form-label">Phone Number</label>
                <div class="input-group">
                  <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-telephone"></i>
                  </span>
                  <input
                    type="tel"
                    class="form-control border-start-0"
                    id="phone"
                    name="phone"
                    value="<%= user.phone %>"
                    placeholder="+91 12345 67890"
                  />
                </div>
                <div id="phoneError" class="text-danger small mt-1"></div>
              </div>

              <div class="col-12 d-flex flex-wrap justify-content-between align-items-center mt-4">
                <button type="button" class="btn btn-outline-dark" data-bs-toggle="modal" data-bs-target="#emailUpdateModal">
                  <i class="bi bi-envelope-check me-2"></i>Update Email
                </button>
                <button type="submit" class="btn btn-dark px-4 py-2">
                  <i class="bi bi-check2-circle me-2"></i>Save Changes
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Email Update Modal -->
<div class="modal fade" id="emailUpdateModal" tabindex="-1" aria-labelledby="emailUpdateModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header border-0">
        <h5 class="modal-title" id="emailUpdateModalLabel">Update Email Address</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p class="text-muted small mb-3">Enter your new email address to receive a verification code</p>
        <form action="/request-email-update" id="emailUpdateForm">
          <div class="mb-3">
            <label for="currentEmail" class="form-label">Current Email</label>
            <div class="input-group">
              <span class="input-group-text bg-light border-end-0">
                <i class="bi bi-envelope"></i>
              </span>
              <input type="email" class="form-control bg-light border-start-0" id="currentEmail" value="<%= user.email %>" readonly />
            </div>
          </div>
          <div class="mb-3">
            <label for="newEmail" class="form-label">New Email Address</label>
            <div class="input-group">
              <span class="input-group-text bg-light border-end-0">
                <i class="bi bi-envelope-plus"></i>
              </span>
              <input type="email" class="form-control border-start-0" id="newEmail" name="email" placeholder="Enter your new email address" required />
            </div>
            <div id="newEmailError" class="text-danger small mt-1"></div>
          </div>
        </form>
      </div>
      <div class="modal-footer border-0">
        <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" form="emailUpdateForm" class="btn btn-dark" id="emailUpdateSubmitBtn">
          <i class="bi bi-send me-2"></i>Send OTP
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Add Bootstrap Icons CDN -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css"/>
<!-- Add SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
  /* Custom styling */
  .primary-bg {
    background-color: #f0f0f0;
    color: #1a1a1a;
    font-weight: 500;
  }

  .primary-bg:hover {
    background-color: #e5e5e5;
    color: #000;
  }

  .breadcrumb-item + .breadcrumb-item::before {
    content: "â€º";
    font-weight: bold;
  }

  .breadcrumb a {
    color: #333;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    color: #000;
    text-decoration: underline;
  }

  /* Profile image container */
  .profile-image-container {
    position: relative;
    width: 120px;
    height: 120px;
    margin: 0 auto;
  }

  .profile-image-container img {
    width: 120px;
    height: 120px;
    object-fit: cover;
  }

  .profile-image-overlay {
    position: absolute;
    bottom: 0;
    right: 0;
    background-color: rgba(0, 0, 0, 0.7);
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .upload-icon {
    color: white;
    font-size: 16px;
    cursor: pointer;
    margin: 0;
  }

  .profile-image-overlay:hover {
    background-color: rgba(0, 0, 0, 0.9);
  }

  @media (max-width: 991px) {
    .profile-sidebar {
      margin-bottom: 2rem;
    }
  }

  /* Card styling */
  .card {
    transition: transform 0.2s;
    border-radius: 10px;
  }

  .card-header {
    border-radius: 10px 10px 0 0 !important;
  }

  /* Validation styling */
  .is-valid {
    border-color: #198754 !important;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    padding-right: calc(1.5em + 0.75rem) !important;
  }

  .is-invalid {
    border-color: #dc3545 !important;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    padding-right: calc(1.5em + 0.75rem) !important;
  }
</style>

<script>
// Validation helper functions
function setInvalid(element, errorElement, message) {
  element.classList.add("is-invalid");
  element.classList.remove("is-valid");
  errorElement.textContent = message;
}

function setValid(element, errorElement) {
  element.classList.add("is-valid");
  element.classList.remove("is-invalid");
  errorElement.textContent = "";
}

function clearValidation(element, errorElement) {
  element.classList.remove("is-invalid", "is-valid");
  errorElement.textContent = "";
}

// Email validation function
function validateEmail(email) {
  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  if (!emailRegex.test(email)) return false;

  const disposableDomains = [
    "mailinator.com",
    "tempmail.com",
    "temp-mail.org",
    "guerrillamail.com",
    "yopmail.com",
    "sharklasers.com",
  ];
  const domain = email.split("@")[1];
  return !disposableDomains.includes(domain);
}

// Full Name validation
function validateFullName(fullName) {
  const trimmedName = fullName.trim();
  if (trimmedName.length < 3) return false;

  const nameWords = trimmedName.split(/\s+/).filter((word) => word.length > 0);
  if (nameWords.length < 2) return false;

  return /^[A-Za-z\s'-]+$/.test(trimmedName);
}

// Phone Number validation
function validatePhoneNumber(phoneNumber) {
  if (!phoneNumber) return true; // Phone is optional
  const cleanPhone = phoneNumber.replace(/\D/g, "");
  if (
    cleanPhone.length !== 10 &&
    (cleanPhone.length < 11 || cleanPhone.length > 15)
  ) {
    return false;
  }
  if (
    /^(.)\1+$/.test(cleanPhone) ||
    /^0{10}$/.test(cleanPhone) ||
    /^1{10}$/.test(cleanPhone)
  ) {
    return false;
  }
  return true;
}

// Toast configuration
const Toast = Swal.mixin({
  toast: true,
  position: "bottom-end",
  showConfirmButton: false,
  timer: 3000,
  timerProgressBar: true,
  didOpen: (toast) => {
    toast.addEventListener("mouseenter", Swal.stopTimer);
    toast.addEventListener("mouseleave", Swal.resumeTimer);
  },
});

// Profile Image Upload
document
  .getElementById("profileImageUpload")
  .addEventListener("change", async function (event) {
    const file = event.target.files[0];
    if (!file) return;

    if (!file.type.startsWith("image/")) {
      Toast.fire({
        icon: "error",
        title: "Please select an image file",
      });
      return;
    }

    const formData = new FormData();
    formData.append("profileImage", file);

    try {
      const response = await fetch("/profile/image", {
        method: "POST",
        body: formData,
      });
      const result = await response.json();

      if (result.success) {
        document.getElementById("profileImageMain").src = result.profileImage;
        document.getElementById("profileImage").src = result.profileImage; // Update sidebar image
        Toast.fire({
          icon: "success",
          title: "Profile image uploaded successfully",
        });
      } else {
        Toast.fire({
          icon: "error",
          title: result.message || "Failed to upload image",
        });
      }
    } catch (error) {
      console.error("Image upload error:", error);
      Toast.fire({
        icon: "error",
        title: "Server error. Please try again.",
      });
    }
  });

// Profile form validation
const fullNameInput = document.getElementById("fullName");
const phoneInput = document.getElementById("phone");
const fullNameError = document.getElementById("fullNameError");
const phoneError = document.getElementById("phoneError");

fullNameInput.addEventListener("input", function () {
  const fullName = this.value.trim();
  if (!fullName) {
    clearValidation(this, fullNameError);
  } else if (!validateFullName(fullName)) {
    const nameWords = fullName.split(/\s+/).filter((word) => word.length > 0);
    if (nameWords.length < 2) {
      setInvalid(this, fullNameError, "Please provide both first and last name");
    } else if (!/^[A-Za-z\s'-]+$/.test(fullName)) {
      setInvalid(this, fullNameError, "Name contains invalid characters");
    } else {
      setInvalid(this, fullNameError, "Full name must be at least 3 characters");
    }
  } else {
    setValid(this, fullNameError);
  }
});

phoneInput.addEventListener("input", function () {
  const phoneNumber = this.value.trim();
  if (!phoneNumber) {
    clearValidation(this, phoneError);
  } else if (!validatePhoneNumber(phoneNumber)) {
    const cleanPhone = phoneNumber.replace(/\D/g, "");
    if (
      /^(.)\1+$/.test(cleanPhone) ||
      /^0{10}$/.test(cleanPhone) ||
      /^1{10}$/.test(cleanPhone)
    ) {
      setInvalid(this, phoneError, "Please enter a valid phone number");
    } else {
      setInvalid(
        this,
        phoneError,
        "Phone number must be 10 digits or include a valid country code"
      );
    }
  } else {
    setValid(this, phoneError);
  }
});

// Profile form submission
document.getElementById("profileForm").addEventListener("submit", async function (event) {
  event.preventDefault();

  const fullName = fullNameInput.value.trim();
  const phone = phoneInput.value.trim();
  let isValid = true;

  // Validate fullName
  if (!fullName || !validateFullName(fullName)) {
    const nameWords = fullName.split(/\s+/).filter((word) => word.length > 0);
    if (nameWords.length < 2) {
      setInvalid(fullNameInput, fullNameError, "Please provide both first and last name");
    } else {
      setInvalid(
        fullNameInput,
        fullNameError,
        "Full name must be at least 3 characters with valid characters"
      );
    }
    isValid = false;
  }

  // Validate phone
  if (phone && !validatePhoneNumber(phone)) {
    setInvalid(phoneInput, phoneError, "Valid phone number is required");
    isValid = false;
  }

  if (!isValid) return;

  const submitButton = this.querySelector('button[type="submit"]');
  const originalText = submitButton.innerHTML;
  submitButton.disabled = true;
  submitButton.innerHTML =
    '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';

  try {
    const response = await fetch("/profile", {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ fullName, phone }),
    });
    const result = await response.json();

    submitButton.disabled = false;
    submitButton.innerHTML = originalText;

    if (result.success) {
      // Update UI immediately
      document.querySelector(".card-body h5").textContent = result.user.fullName;
      fullNameInput.value = result.user.fullName;
      phoneInput.value = result.user.phone || "";
      Toast.fire({
        icon: "success",
        title: "Profile updated successfully",
      });
    } else {
      Toast.fire({
        icon: "error",
        title: result.message || "Failed to update profile",
      });
    }
  } catch (error) {
    console.error("Profile update error:", error);
    submitButton.disabled = false;
    submitButton.innerHTML = originalText;
    Toast.fire({
      icon: "error",
      title: "Server error. Please try again.",
    });
  }
});

// Email update form validation
const newEmailInput = document.getElementById("newEmail");
const newEmailError = document.getElementById("newEmailError");
const currentEmail = document.getElementById("currentEmail").value.trim();

newEmailInput.addEventListener("input", function () {
  const email = this.value.trim();
  if (!email) {
    clearValidation(this, newEmailError);
  } else if (email.toLowerCase() === currentEmail.toLowerCase()) {
    setInvalid(this, newEmailError, "New email must be different from current email");
  } else if (!validateEmail(email)) {
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailRegex.test(email)) {
      setInvalid(this, newEmailError, "Please enter a valid email address");
    } else {
      setInvalid(this, newEmailError, "Please use a non-disposable email address");
    }
  } else {
    setValid(this, newEmailError);
  }
});

// Email update form submission
document.getElementById("emailUpdateForm").addEventListener("submit", async function (event) {
  event.preventDefault();

  const email = newEmailInput.value.trim();
  let isValid = true;

  if (!email || !validateEmail(email)) {
    setInvalid(newEmailInput, newEmailError, "Valid email is required (non-disposable)");
    isValid = false;
  } else if (email.toLowerCase() === currentEmail.toLowerCase()) {
    setInvalid(newEmailInput, newEmailError, "New email must be different from current email");
    isValid = false;
  }

  if (!isValid) return;

  const submitButton = document.getElementById("emailUpdateSubmitBtn");
  const originalText = submitButton.innerHTML;
  submitButton.disabled = true;
  submitButton.innerHTML =
    '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Sending...';

  try {
    const response = await fetch("/request-email-update", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ email }),
    });
    const result = await response.json();

    submitButton.disabled = false;
    submitButton.innerHTML = originalText;

    if (result.success) {
      bootstrap.Modal.getInstance(document.getElementById("emailUpdateModal")).hide();
      Toast.fire({
        icon: "success",
        title: "OTP sent to your new email",
      });
      setTimeout(() => {
        window.location.href = "/verify-email-otp";
      }, 1000);
    } else {
      setInvalid(newEmailInput, newEmailError, result.message || "Failed to send OTP");
    }
  } catch (error) {
    console.error("Email update error:", error);
    submitButton.disabled = false;
    submitButton.innerHTML = originalText;
    Toast.fire({
      icon: "error",
      title: "Server error. Please try again.",
    });
  }
});
</script>

<%- include("../partials/user/footer") %>