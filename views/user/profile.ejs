<%- include("../partials/user/header") %>

<div class="container py-5">
  <!-- Breadcrumbs -->
  <nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/user/dashboard">My Account</a></li>
      <li class="breadcrumb-item active" aria-current="page">My Profile</li>
    </ol>
  </nav>

  <div class="row g-4">
    <!-- Sidebar -->
    <div class="col-lg-3 profile-sidebar">
      <div class="card border-0 shadow-sm mb-4">
        <div class="card-body p-4 text-center">
          <div class="position-relative mx-auto mb-3">
            <div class="profile-image-container">
              <img
                id="profileImage"
                src="<%= user.profileImage || '/api/placeholder/120/120' %>"
                alt="Profile"
                class="rounded-circle img-thumbnail"
                onerror="this.src='/api/placeholder/120/120'; this.onerror=null;"
              />
              <div class="profile-image-overlay">
                <label for="profileImageUpload" class="upload-icon">
                  <i class="bi bi-camera-fill"></i>
                </label>
                <input
                  type="file"
                  id="profileImageUpload"
                  accept="image/*"
                  class="d-none"
                />
              </div>
            </div>
          </div>
          <h5 class="fw-bold mb-1"><%= user.fullName %></h5>
          <p class="text-muted small mb-0"><%= user.email %></p>
        </div>
      </div>

      <div class="card border-0 shadow-sm">
        <div class="list-group list-group-flush rounded-0">
          <div class="bg-dark text-white p-3 fw-medium">Manage My Account</div>
          <a
            href="/profile"
            class="list-group-item list-group-item-action primary-bg"
          >
            <i class="bi bi-person me-2"></i> My Profile
          </a>
          <a href="/address" class="list-group-item list-group-item-action">
            <i class="bi bi-geo-alt me-2"></i> Address Book
          </a>
          <a href="/orders" class="list-group-item list-group-item-action">
            <i class="bi bi-box me-2"></i> My Orders
          </a>
          <a href="/wishlist" class="list-group-item list-group-item-action">
            <i class="bi bi-heart me-2"></i> My Wishlist
          </a>
          <a href="/wallet" class="list-group-item list-group-item-action">
            <i class="bi bi-wallet2 me-2"></i> Wallet
          </a>
          <a href="/coupons" class="list-group-item list-group-item-action">
            <i class="bi bi-ticket-perforated me-2"></i> Coupons
          </a>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="col-lg-9">
      <div class="card border-0 shadow-sm mb-4">
        <div class="card-header bg-white p-4 border-0">
          <h4 class="mb-0">Personal Information</h4>
        </div>
        <div class="card-body p-4">
          <form id="profileForm">
            <div class="row g-3">
              <div class="col-md-12 mb-3">
                <label for="fullName" class="form-label">Full Name</label>
                <div class="input-group">
                  <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-person"></i>
                  </span>
                  <input
                    type="text"
                    class="form-control border-start-0"
                    id="fullName"
                    name="fullName"
                    value="<%= user.fullName %>"
                    placeholder="Enter your full name"
                  />
                </div>
                <div id="fullNameError" class="text-danger small mt-1"></div>
              </div>

              <div class="col-md-6 mb-3">
                <label for="email" class="form-label">Email Address</label>
                <div class="input-group">
                  <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-envelope"></i>
                  </span>
                  <input
                    type="email"
                    class="form-control bg-light border-start-0"
                    id="email"
                    name="email"
                    value="<%= user.email %>"
                    placeholder="example@gmail.com"
                    readonly
                  />
                </div>
                <small class="text-muted"
                  >Email cannot be edited directly</small
                >
              </div>

              <div class="col-md-6 mb-3">
                <label for="phone" class="form-label">Phone Number</label>
                <div class="input-group">
                  <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-telephone"></i>
                  </span>
                  <input
                    type="tel"
                    class="form-control border-start-0"
                    id="phone"
                    name="phone"
                    value="<%= user.phone %>"
                    placeholder="+91 12345 67890"
                  />
                </div>
                <div id="phoneError" class="text-danger small mt-1"></div>
              </div>

              <div
                class="col-12 d-flex flex-wrap justify-content-between align-items-center mt-4"
              >
                <button
                  type="button"
                  class="btn btn-outline-dark"
                  data-bs-toggle="modal"
                  data-bs-target="#emailUpdateModal"
                >
                  <i class="bi bi-envelope-check me-2"></i>Update Email
                </button>
                <button type="submit" class="btn btn-dark px-4 py-2">
                  <i class="bi bi-check2-circle me-2"></i>Save Changes
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Email Update Modal -->
<div
  class="modal fade"
  id="emailUpdateModal"
  tabindex="-1"
  aria-labelledby="emailUpdateModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header border-0">
        <h5 class="modal-title" id="emailUpdateModalLabel">
          Update Email Address
        </h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <p class="text-muted small mb-3">
          Enter your new email address to receive a verification code
        </p>
        <form action="/request-email-update" id="emailUpdateForm">
          <div class="mb-3">
            <label for="currentEmail" class="form-label">Current Email</label>
            <div class="input-group">
              <span class="input-group-text bg-light border-end-0">
                <i class="bi bi-envelope"></i>
              </span>
              <input
                type="email"
                class="form-control bg-light border-start-0"
                id="currentEmail"
                value="<%= user.email %>"
                readonly
              />
            </div>
          </div>
          <div class="mb-3">
            <label for="newEmail" class="form-label">New Email Address</label>
            <div class="input-group">
              <span class="input-group-text bg-light border-end-0">
                <i class="bi bi-envelope-plus"></i>
              </span>
              <input
                type="email"
                class="form-control border-start-0"
                id="newEmail"
                name="email"
                placeholder="Enter your new email address"
                required
              />
            </div>
            <div id="newEmailError" class="text-danger small mt-1"></div>
          </div>
        </form>
      </div>
      <div class="modal-footer border-0">
        <button type="button" class="btn btn-light" data-bs-dismiss="modal">
          Cancel
        </button>
        <button
          type="submit"
          form="emailUpdateForm"
          class="btn btn-dark"
          id="emailUpdateSubmitBtn"
        >
          <i class="bi bi-send me-2"></i>Send OTP
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Add Bootstrap Icons CDN -->
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css"
/>

<style>
  /* Custom styling */
  .primary-bg {
    background-color: #f0f0f0;
    color: #1a1a1a;
    font-weight: 500;
  }

  .primary-bg:hover {
    background-color: #e5e5e5;
    color: #000;
  }

  .breadcrumb-item + .breadcrumb-item::before {
    content: "â€º";
    font-weight: bold;
  }

  .breadcrumb a {
    color: #333;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    color: #000;
    text-decoration: underline;
  }

  /* Profile image container */
  .profile-image-container {
    position: relative;
    width: 120px;
    height: 120px;
    margin: 0 auto;
  }

  .profile-image-container img {
    width: 120px;
    height: 120px;
    object-fit: cover;
  }

  .profile-image-overlay {
    position: absolute;
    bottom: 0;
    right: 0;
    background-color: rgba(0, 0, 0, 0.7);
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .upload-icon {
    color: white;
    font-size: 16px;
    cursor: pointer;
    margin: 0;
  }

  .profile-image-overlay:hover {
    background-color: rgba(0, 0, 0, 0.9);
  }

  @media (max-width: 991px) {
    .profile-sidebar {
      margin-bottom: 2rem;
    }
  }

  /* Card styling */
  .card {
    transition: transform 0.2s;
    border-radius: 10px;
  }

  .card-header {
    border-radius: 10px 10px 0 0 !important;
  }

  /* Validation styling */
  .is-valid {
    border-color: #198754 !important;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    padding-right: calc(1.5em + 0.75rem) !important;
  }

  .is-invalid {
    border-color: #dc3545 !important;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    padding-right: calc(1.5em + 0.75rem) !important;
  }
</style>

<script>
  // Validation helper functions
  function setInvalid(element) {
    element.classList.add("is-invalid");
    element.classList.remove("is-valid");
  }

  function setValid(element) {
    element.classList.add("is-valid");
    element.classList.remove("is-invalid");
  }

  // Email validation function
  function validateEmail(email) {
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailRegex.test(email)) return false;

    // Check for disposable email domains
    const disposableDomains = [
      "mailinator.com",
      "tempmail.com",
      "temp-mail.org",
      "guerrillamail.com",
      "yopmail.com",
      "sharklasers.com",
    ];
    const domain = email.split("@")[1];
    return !disposableDomains.includes(domain);
  }

  // Full Name validation
  function validateFullName(fullName) {
    const trimmedName = fullName.trim();
    if (trimmedName.length < 3) return false;

    const nameWords = trimmedName.split(" ").filter((word) => word.length > 0);
    if (nameWords.length < 2) return false;

    return /^[A-Za-z\s'-]+$/.test(trimmedName);
  }

  // Phone Number validation
  function validatePhoneNumber(phoneNumber) {
    // Remove any non-digit characters
    const cleanPhone = phoneNumber.replace(/\D/g, "");

    // Check length (10 digits standard or 11-15 with country code)
    if (
      cleanPhone.length !== 10 &&
      (cleanPhone.length < 11 || cleanPhone.length > 15)
    ) {
      return false;
    }

    // Check for obviously fake patterns
    if (
      /^(.)\1+$/.test(cleanPhone) ||
      /^0{10}$/.test(cleanPhone) ||
      /^1{10}$/.test(cleanPhone)
    ) {
      return false;
    }

    return true;
  }

  // Profile Image Upload
  document
    .getElementById("profileImageUpload")
    .addEventListener("change", function (event) {
      const file = event.target.files[0];
      if (file) {
        // Validate file is image
        if (!file.type.startsWith("image/")) {
          alert("Please select an image file");
          return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
          // Display the image preview
          document.getElementById("profileImage").src = e.target.result;

          // Here you would typically upload the image to server
          // For demonstration, we're just showing a success message
          // In a real implementation, add AJAX to upload file to server
          setTimeout(() => {
            const toast = document.createElement("div");
            toast.className = "position-fixed bottom-0 end-0 p-3";
            toast.style.zIndex = "11";
            toast.innerHTML = `
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
              <div class="toast-header">
                <strong class="me-auto">Profile Updated</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
              </div>
              <div class="toast-body">
                Profile image uploaded successfully!
              </div>
            </div>
          `;
            document.body.appendChild(toast);

            // Remove toast after 3 seconds
            setTimeout(() => {
              document.body.removeChild(toast);
            }, 3000);
          }, 500);
        };
        reader.readAsDataURL(file);
      }
    });

  // Profile form validation
  document.getElementById("fullName").addEventListener("input", function () {
    const fullName = this.value.trim();
    const fullNameError = document.getElementById("fullNameError");

    if (fullName === "") {
      fullNameError.textContent = "";
      this.classList.remove("is-invalid");
      this.classList.remove("is-valid");
    } else if (!validateFullName(fullName)) {
      const nameWords = fullName.split(" ").filter((word) => word.length > 0);
      if (nameWords.length < 2) {
        fullNameError.textContent = "Please provide both first and last name.";
      } else if (!/^[A-Za-z\s'-]+$/.test(fullName)) {
        fullNameError.textContent = "Name contains invalid characters.";
      } else {
        fullNameError.textContent = "Full name must be at least 3 characters.";
      }
      setInvalid(this);
    } else {
      fullNameError.textContent = "";
      setValid(this);
    }
  });

  document.getElementById("phone").addEventListener("input", function () {
    const phoneNumber = this.value.trim();
    const phoneError = document.getElementById("phoneError");

    if (phoneNumber === "") {
      phoneError.textContent = "";
      this.classList.remove("is-invalid");
      this.classList.remove("is-valid");
    } else if (!validatePhoneNumber(phoneNumber)) {
      const cleanPhone = phoneNumber.replace(/\D/g, "");

      if (
        /^(.)\1+$/.test(cleanPhone) ||
        /^0{10}$/.test(cleanPhone) ||
        /^1{10}$/.test(cleanPhone)
      ) {
        phoneError.textContent = "Please enter a valid phone number.";
      } else {
        phoneError.textContent =
          "Phone number must be 10 digits or include a valid country code.";
      }
      setInvalid(this);
    } else {
      phoneError.textContent = "";
      setValid(this);
    }
  });

  // Profile form submission
  document
    .getElementById("profileForm")
    .addEventListener("submit", async function (event) {
      event.preventDefault();

      const fullName = document.getElementById("fullName").value.trim();
      const phone = document.getElementById("phone").value.trim();

      let isValid = true;

      // Validate fullName
      if (!fullName || !validateFullName(fullName)) {
        const nameWords = fullName.split(" ").filter((word) => word.length > 0);
        if (nameWords.length < 2) {
          document.getElementById("fullNameError").textContent =
            "Please provide both first and last name.";
        } else {
          document.getElementById("fullNameError").textContent =
            "Full name must be at least 3 characters with valid characters.";
        }
        setInvalid(document.getElementById("fullName"));
        isValid = false;
      }

      // Validate phone
      if (!phone || !validatePhoneNumber(phone)) {
        document.getElementById("phoneError").textContent =
          "Valid phone number is required.";
        setInvalid(document.getElementById("phone"));
        isValid = false;
      }

      if (isValid) {
        // Show loading state on button
        const submitButton = this.querySelector('button[type="submit"]');
        const originalText = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML =
          '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';

        // Simulate API call delay
        setTimeout(() => {
          // Reset button state
          submitButton.disabled = false;
          submitButton.innerHTML = originalText;

          // Show success message
          const toast = document.createElement("div");
          toast.className = "position-fixed bottom-0 end-0 p-3";
          toast.style.zIndex = "11";
          toast.innerHTML = `
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
              <div class="toast-header">
                <strong class="me-auto">Profile Updated</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
              </div>
              <div class="toast-body">
                Your profile has been updated successfully!
              </div>
            </div>
          `;
          document.body.appendChild(toast);

          // Remove toast after 3 seconds
          setTimeout(() => {
            document.body.removeChild(toast);
          }, 3000);
        }, 1000);

        // In a real implementation, you would submit the form data here
        // this.submit();
      }
    });

  // New Email validation
  document.getElementById("newEmail").addEventListener("input", function () {
    const email = this.value.trim();
    const newEmailError = document.getElementById("newEmailError");
    const currentEmail = document.getElementById("currentEmail").value.trim();

    if (email === "") {
      newEmailError.textContent = "";
      this.classList.remove("is-invalid");
      this.classList.remove("is-valid");
    } else if (email === currentEmail) {
      newEmailError.textContent =
        "New email must be different from current email.";
      setInvalid(this);
    } else if (!validateEmail(email)) {
      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
      if (!emailRegex.test(email)) {
        newEmailError.textContent = "Please enter a valid email address.";
      } else {
        newEmailError.textContent =
          "Please use a non-disposable email address.";
      }
      setInvalid(this);
    } else {
      newEmailError.textContent = "";
      setValid(this);
    }
  });

  // Email update form submission
  document
    .getElementById("emailUpdateForm")
    .addEventListener("submit", async function (event) {
      event.preventDefault();

      const email = document.getElementById("newEmail").value.trim();
      const currentEmail = document.getElementById("currentEmail").value.trim();
      let isValid = true;

      // Validate email
      if (!email || !validateEmail(email)) {
        document.getElementById("newEmailError").textContent =
          "Valid email is required (non-disposable).";
        setInvalid(document.getElementById("newEmail"));
        isValid = false;
      } else if (email === currentEmail) {
        document.getElementById("newEmailError").textContent =
          "New email must be different from current email.";
        setInvalid(document.getElementById("newEmail"));
        isValid = false;
      }

      if (isValid) {
        // Show loading state
        const submitButton = document.getElementById("emailUpdateSubmitBtn");
        submitButton.disabled = true;
        submitButton.innerHTML =
          '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Sending...';

        try {
          const response = await fetch("/request-email-update", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ email }),
          });

          const result = await response.json();
          submitButton.disabled = false;
          submitButton.innerHTML = '<i class="bi bi-send me-2"></i>Send OTP';

          if (result.success) {
            // Close modal
            const modal = bootstrap.Modal.getInstance(
              document.getElementById("emailUpdateModal")
            );
            modal.hide();

            // Show success message
            Swal.fire({
              icon: "success",
              title: "OTP Sent",
              text: "A verification code has been sent to your new email. Please check your inbox.",
              confirmButtonColor: "#3085d6",
              confirmButtonText: "Verify OTP",
            }).then(() => {
              window.location.href = "/verify-email-otp";
            });
          } else {
            // Handle errors
            if (result.errors && result.errors.email) {
              document.getElementById("newEmailError").textContent =
                result.errors.email;
              setInvalid(document.getElementById("newEmail"));
            } else {
              Swal.fire({
                icon: "error",
                title: "Error",
                text: result.message || "Something went wrong!",
              });
            }
          }
        } catch (err) {
          console.log("Email update error:", err);
          submitButton.disabled = false;
          submitButton.innerHTML = '<i class="bi bi-send me-2"></i>Send OTP';

          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Server not responding. Try again later.",
          });
        }
      }
    });
</script>

<%- include("../partials/user/footer") %>
