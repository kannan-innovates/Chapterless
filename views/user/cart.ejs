<%- include("../partials/user/header") %>

<!-- Cart Header Section -->
<section class="py-5 bg-light">
  <div class="container">
    <div class="row justify-content-center">
      <div class="col-lg-8 text-center">
        <h1 class="display-5 fw-bold mb-2">Your Cart</h1>
        <p class="text-muted mb-0">Review and modify your selected stories</p>
      </div>
    </div>
  </div>
</section>

<!-- Cart Content Section -->
<section class="py-5">
  <div class="container">
    <div class="row g-5">
      <!-- Cart Items -->
      <div class="col-lg-8">
        <!-- Empty Cart State -->
        <div class="empty-cart text-center py-5 <%= cartItems.length === 0 ? '' : 'd-none' %>">
          <div class="mb-4">
            <i class="ri-shopping-cart-line" style="font-size: 4rem; color: #ccc;"></i>
          </div>
          <h3 class="fs-4 fw-semibold mb-3">Your cart is empty</h3>
          <p class="text-muted mb-4">Looks like you haven't found your story yet</p>
          <a href="/shopPage" class="btn btn-dark px-4 py-2">Continue Shopping</a>
        </div>

        <!-- Cart Items List -->
        <div class="cart-items <%= cartItems.length === 0 ? 'd-none' : '' %>">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="fs-4 fw-bold">Items (<%= cartItems.reduce((sum, item) => sum + item.quantity, 0) %>)</h2>
            <button class="btn btn-link text-dark p-0 text-decoration-none" id="clearCartBtn">Clear Cart</button>
          </div>

          <% cartItems.forEach(item => { %>
            <div class="cart-item bg-white p-4 mb-3 rounded shadow-sm" data-product-id="<%= item.product._id %>">
              <div class="row align-items-center">
                <div class="col-md-2 col-4 mb-3 mb-md-0">
                  <img src="<%= item.product.mainImage || '/api/placeholder/150/200' %>" alt="<%= item.product.title %>" class="img-fluid rounded" />
                </div>
                <div class="col-md-6 col-8 mb-3 mb-md-0">
                  <h3 class="fs-5 fw-semibold mb-1"><%= item.product.title %></h3>
                  <p class="text-muted small mb-1"><%= item.product.author %></p>
                  <p class="small mb-0"><%= item.product.format || 'Hardcover' %></p>
                  <span class="stock-status <%= item.product.stock > 10 ? 'in-stock' : item.product.stock > 0 ? 'low-stock' : 'out-of-stock' %>">
                    <i class="ri-<%= item.product.stock > 10 ? 'checkbox-circle-line' : item.product.stock > 0 ? 'alert-line' : 'close-circle-line' %> me-1"></i>
                    <%= item.product.stock > 10 ? `In Stock (${item.product.stock} copies available)` : item.product.stock > 0 ? `Low Stock (${item.product.stock} copies left)` : 'Out of Stock' %>
                  </span>
                </div>
                <div class="col-md-2 col-6 text-md-center">
                  <div class="quantity-selector d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-dark quantity-btn">-</button>
                    <input type="number" class="form-control form-control-sm mx-2 text-center quantity-input" value="<%= item.quantity %>" min="1" max="<%= item.product.stock %>" style="width: 50px;" />
                    <button class="btn btn-sm btn-outline-dark quantity-btn">+</button>
                  </div>
                </div>
                <div class="col-md-2 col-6 text-end">
                  <div class="d-flex flex-column align-items-end">
                    <span class="fw-bold mb-2">₹<%= (item.quantity * item.priceAtAddition).toFixed(2) %></span>
                    <button class="btn btn-link text-danger p-0 small text-decoration-none remove-item">Remove</button>
                  </div>
                </div>
              </div>
            </div>
          <% }) %>
        </div>

        <!-- Continue Shopping -->
        <div class="mt-4">
          <a href="/shopPage" class="text-dark d-flex align-items-center text-decoration-none">
            <i class="ri-arrow-left-line me-2"></i> Continue Shopping
          </a>
        </div>
      </div>

      <!-- Order Summary -->
      <div class="col-lg-4">
        <div class="order-summary bg-white p-4 rounded shadow-sm <%= cartItems.length === 0 ? 'd-none' : '' %>" id="orderSummary">
          <h2 class="fs-4 fw-bold mb-4">Order Summary</h2>
          
          <!-- Subtotal -->
          <div class="d-flex justify-content-between mb-3">
            <span>Subtotal (<%= cartItems.reduce((sum, item) => sum + item.quantity, 0) %> items)</span>
            <span class="fw-semibold">₹<%= totalAmount.toFixed(2) %></span>
          </div>
          
          <!-- Shipping -->
          <div class="d-flex justify-content-between mb-3">
            <span>Shipping</span>
            <span class="fw-semibold">₹0</span>
          </div>
          
          <!-- Discount -->
          <div class="d-flex justify-content-between mb-3 text-success">
            <span>Discount</span>
            <!-- Placeholder for discount -->
          </div>
          
          <!-- Promo Code -->
          <div class="promo-code mb-4">
            <div class="input-group mb-2">
              <input type="text" class="form-control" placeholder="Enter promo code" aria-label="Promo code">
              <button class="btn btn-dark" type="button">Apply</button>
            </div>
            <!-- Placeholder for applied promo -->
          </div>
          
          <hr class="my-3">
          
          <!-- Total -->
          <div class="d-flex justify-content-between align-items-center mb-4">
            <span class="fs-5 fw-bold">Total</span>
            <span class="fs-5 fw-bold">₹<%= totalAmount.toFixed(2) %></span>
          </div>
          
          <!-- Checkout Button -->
          <a href="/checkout" class="btn btn-dark w-100 py-3 fw-medium">Proceed to Checkout</a>
          
          <!-- Payment Methods -->
          <div class="payment-methods mt-3 text-center">
            <p class="text-muted small mb-2">We accept</p>
            <div class="d-flex justify-content-center gap-2">
              <div class="payment-icon"><i class="ri-visa-line"></i></div>
              <div class="payment-icon"><i class="ri-mastercard-line"></i></div>
              <div class="payment-icon"><i class="ri-paypal-line"></i></div>
              <div class="payment-icon"><i class="ri-apple-line"></i></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- You May Also Like Section -->
<section class="py-5 bg-light">
  <div class="container">
    <h2 class="fs-2 fw-bold mb-4">You May Also Like</h2>
    <div class="row g-4">
      <% relatedProducts.forEach(product => { %>
        <div class="col-6 col-md-3">
          <div class="product-card bg-white h-100">
            <div class="product-image-container">
              <% 
                const now = new Date();
                const createdAt = new Date(product.createdAt);
                const diffDays = (now - createdAt) / (1000 * 60 * 60 * 24);
                const isNew = diffDays <= 30;
              %>
              <% if (isNew) { %>
                <span class="product-tag">New</span>
              <% } %>
              <a href="/products/<%= product._id %>" class="text-decoration-none">
                <img src="<%= product.mainImage || '/api/placeholder/600/800' %>" alt="<%= product.title %>" class="product-image" />
              </a>
            </div>
            <div class="p-3">
              <h3 class="fs-5 fw-semibold mb-1">
                <a href="/products/<%= product._id %>" class="text-dark text-decoration-none"><%= product.title %></a>
              </h3>
              <p class="text-muted small mb-2"><%= product.author %></p>
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <span class="fw-bold">₹<%= product.salePrice %></span>
                  <span class="stock-status <%= product.stock > 10 ? 'in-stock' : product.stock > 0 ? 'low-stock' : 'out-of-stock' %>">
                    <i class="ri-<%= product.stock > 10 ? 'checkbox-circle-line' : product.stock > 0 ? 'alert-line' : 'close-circle-line' %> me-1"></i>
                    <%= product.stock > 10 ? 'In Stock' : product.stock > 0 ? 'Low Stock' : 'Out of Stock' %>
                  </span>
                </div>
                <button class="add-to-cart border-0" data-product-id="<%= product._id %>">
                  <i class="ri-add-line"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
</section>

<%- include("../partials/user/footer") %>

<style>
  body {
    font-family: "Inter", sans-serif;
    color: #1a1a1a;
    background-color: #f9f9f9;
  }
  
  .cart-item {
    transition: all 0.2s ease;
  }
  
  .cart-item:hover {
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
  }
  
  .quantity-btn {
    width: 28px;
    height: 28px;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .quantity-btn:focus {
    box-shadow: none;
  }
  
  .form-control:focus {
    box-shadow: none;
    border-color: #000;
  }
  
  .btn-dark {
    background-color: #000;
    border-color: #000;
  }
  
  .btn-dark:hover {
    background-color: #333;
    border-color: #333;
  }
  
  .btn-outline-dark:hover {
    background-color: #000;
    border-color: #000;
  }
  
  .product-image-container {
    height: 16rem;
    overflow: hidden;
    position: relative;
  }
  
  .product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: top;
    transition: transform 0.5s ease;
  }
  
  .product-card:hover .product-image {
    transform: scale(1.05);
  }
  
  .product-tag {
    position: absolute;
    top: 0.75rem;
    left: 0.75rem;
    z-index: 10;
    background-color: #000;
    color: #fff;
    font-size: 0.75rem;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
  }
  
  .add-to-cart {
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 9999px;
    background-color: #000;
    color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }
  
  .add-to-cart:hover {
    background-color: #333;
  }
  
  .payment-icon {
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #6b7280;
  }
  
  .stock-status {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    font-weight: 500;
    margin-top: 0.5rem;
  }
  
  .in-stock {
    background-color: #ecfdf5;
    color: #047857;
  }
  
  .low-stock {
    background-color: #fffbeb;
    color: #b45309;
  }
  
  .out-of-stock {
    background-color: #fef2f2;
    color: #b91c1c;
  }
  
  #orderSummary.fixed {
    position: fixed;
    top: 80px;
    width: inherit;
    max-width: inherit;
  }
  
  @media (max-width: 767.98px) {
    .quantity-selector {
      justify-content: flex-start;
    }
    
    #orderSummary.fixed {
      position: fixed;
      top: 80px;
      z-index: 100;
      transition: all 0.2s ease;
    }
    
    .col-lg-4 {
      position: relative;
    }
    
    @media (max-width: 991.98px) {
      #orderSummary.fixed {
        position: static !important;
        width: 100% !important;
      }
    }
    
    .stock-status {
      padding: 0.15rem 0.5rem;
      font-size: 0.75rem;
    }
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
  // DOM Elements
  const clearCartBtn = document.querySelector('#clearCartBtn');
  const emptyCart = document.querySelector('.empty-cart');
  const cartItemsContainer = document.querySelector('.cart-items');
  const orderSummary = document.querySelector('#orderSummary');
  const cartCountElement = document.querySelector('.cart-count');
  
  // Store initial values for all quantity inputs
  document.querySelectorAll('.quantity-input').forEach(input => {
    input.dataset.previousValue = input.value;
  });

  // Clear cart
  if (clearCartBtn) {
    clearCartBtn.addEventListener('click', clearCart);
  }

  // Set up event listeners for all cart items
  setupCartItemHandlers();

  // Add to cart for related products
  document.querySelectorAll('.add-to-cart').forEach(button => {
    button.addEventListener('click', function() {
      addToCart(this.dataset.productId);
    });
  });

  // Fixed order summary on scroll
  window.addEventListener('scroll', handleOrderSummaryPosition);

  // Main Functions
  // =============

  async function clearCart() {
    try {
      const response = await fetch('/cart/clear', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'same-origin'
      });
      
      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();

      if (result.success) {
        emptyCart.classList.remove('d-none');
        cartItemsContainer.classList.add('d-none');
        orderSummary.classList.add('d-none');
        updateCartCount(result.cartCount);

        showNotification('success', result.message);
      } else {
        showNotification('error', result.message || 'Failed to clear cart');
      }
    } catch (error) {
      console.error('Clear cart error:', error);
      showNotification('error', 'Error clearing cart');
    }
  }

  function setupCartItemHandlers() {
    const cartItems = document.querySelectorAll('.cart-item');
    
    cartItems.forEach(item => {
      const productId = item.dataset.productId;
      const minusBtn = item.querySelector('.quantity-btn:first-child');
      const plusBtn = item.querySelector('.quantity-btn:last-child');
      const quantityInput = item.querySelector('.quantity-input');
      const removeBtn = item.querySelector('.remove-item');

      if (!quantityInput) {
        return;
      }

      // Preserve initial values
      quantityInput.dataset.previousValue = quantityInput.value;
      
      // Debounce timer to prevent rapid-fire requests
      let updateTimeout;

      minusBtn && minusBtn.addEventListener('click', function() {
        let value = parseInt(quantityInput.value);
        if (value > 1) {
          quantityInput.value = value - 1;
          clearTimeout(updateTimeout);
          updateTimeout = setTimeout(() => {
            updateCartItem(productId, parseInt(quantityInput.value), item);
          }, 300);
        }
      });

      plusBtn && plusBtn.addEventListener('click', function() {
        let value = parseInt(quantityInput.value);
        const maxValue = parseInt(quantityInput.getAttribute('max') || '999');
        
        if (value >= maxValue) {
          showNotification('error', `Only ${maxValue} items in stock`);
          return;
        }

        quantityInput.value = value + 1;
        clearTimeout(updateTimeout);
        updateTimeout = setTimeout(() => {
          updateCartItem(productId, parseInt(quantityInput.value), item);
        }, 300);
      });

      quantityInput && quantityInput.addEventListener('change', function() {
        let value = parseInt(this.value);
        const maxValue = parseInt(this.getAttribute('max') || '999');
        
        // Validate input
        if (isNaN(value) || value < 1) {
          value = 1;
        } else if (value > maxValue) {
          value = maxValue;
          this.value = value;
          showNotification('error', `Only ${maxValue} items in stock`);
          return;
        }
        
        this.value = value;
        clearTimeout(updateTimeout);
        updateTimeout = setTimeout(() => {
          updateCartItem(productId, value, item);
        }, 300);
      });

      removeBtn && removeBtn.addEventListener('click', function() {
        removeCartItem(productId, item);
      });
    });
  }

  async function updateCartItem(productId, quantity, item) {
    try {
      // Visual feedback that update is in progress
      item.classList.add('updating');
      
      // Store current value for rollback if needed
      const quantityInput = item.querySelector('.quantity-input');
      const previousValue = quantityInput.dataset.previousValue;
      
      const response = await fetch('/cart/update', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin',
        body: JSON.stringify({ 
          productId: productId, 
          quantity: quantity 
        })
      });
      
      // Check HTTP status
      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
      }
      
      // Parse response
      const result = await response.json();

      if (result.success) {
        // Update was successful
        quantityInput.dataset.previousValue = quantity;
        
        // Update price display for this item
        const priceElement = item.querySelector('.fw-bold');
        if (priceElement) {
          priceElement.textContent = `₹${result.itemTotal.toFixed(2)}`;
        }
        
        // Update all summary elements using the server's total
        if (typeof result.totalAmount === 'number') {
          updateOrderSummaryDOM(result.totalAmount, result.cartCount);
        }
        
        // Update cart count if provided
        if (result.cartCount !== undefined) {
          updateCartCount(result.cartCount);
        } else {
          // Recalculate from visible items if server didn't provide count
          recalculateCartCount();
        }

        showNotification('success', result.message || 'Cart updated successfully');
      } else {
        // Server returned success:false
        console.error('Update failed:', result.message);
        
        // Revert to previous value
        quantityInput.value = previousValue;
        
        showNotification('error', result.message || 'Failed to update cart');
      }
    } catch (error) {
      console.error('Cart update error:', error);
      
      // Revert to previous value on exception
      const quantityInput = item.querySelector('.quantity-input');
      quantityInput.value = quantityInput.dataset.previousValue;
      
      showNotification('error', 'Error communicating with server');
    } finally {
      // Remove updating class regardless of outcome
      item.classList.remove('updating');
    }
  }

  async function removeCartItem(productId, item) {
    try {
      // Visual feedback
      item.style.opacity = '0.5';
      
      const response = await fetch('/cart/remove', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin',
        body: JSON.stringify({ productId })
      });
      
      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();

      if (result.success) {
        // Fade out and remove
        item.style.opacity = '0';
        setTimeout(() => {
          item.remove();
          
          // Update order summary with server-provided total
          if (typeof result.totalAmount === 'number') {
            updateOrderSummaryDOM(result.totalAmount, result.cartCount);
          }
          
          // Update cart count
          updateCartCount(result.cartCount);

          // Check if cart is now empty
          if (document.querySelectorAll('.cart-item').length === 0) {
            emptyCart.classList.remove('d-none');
            cartItemsContainer.classList.add('d-none');
            orderSummary.classList.add('d-none');
          }

          showNotification('success', result.message || 'Item removed from cart');
        }, 300);
      } else {
        // Restore opacity
        item.style.opacity = '1';
        showNotification('error', result.message || 'Failed to remove item');
      }
    } catch (error) {
      console.error('Remove item error:', error);
      // Restore opacity
      item.style.opacity = '1';
      showNotification('error', 'Error removing item');
    }
  }

  async function addToCart(productId) {
    try {
      const response = await fetch('/cart/add', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin',
        body: JSON.stringify({ productId, quantity: 1 })
      });
      
      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();

      if (result.success) {
        updateCartCount(result.cartCount);
        showNotification('success', result.message || 'Item added to cart');
      } else {
        showNotification('error', result.message || 'Failed to add item to cart');
      }
    } catch (error) {
      console.error('Add to cart error:', error);
      showNotification('error', 'Error adding to cart');
    }
  }

  // Helper Functions
  // ===============

  function updateCartCount(count) {
    if (cartCountElement) {
      cartCountElement.textContent = count;
      cartCountElement.dataset.count = count;
    }
  }

  function recalculateCartCount() {
    if (cartCountElement) {
      const count = Array.from(document.querySelectorAll('.cart-item'))
        .reduce((sum, item) => {
          const input = item.querySelector('.quantity-input');
          return sum + (input ? parseInt(input.value) : 0);
        }, 0);
      
      cartCountElement.textContent = count;
      cartCountElement.dataset.count = count;
    }
  }

  // Direct DOM manipulation for order summary updates
  function updateOrderSummaryDOM(totalAmount, cartCount) {
    // Find the subtotal element - capture and try multiple selectors
    const subtotalElement = findElement([
      '#orderSummary .d-flex:first-child .fw-semibold',
      '#orderSummary .d-flex:nth-child(1) .fw-semibold',
      '#orderSummary .d-flex .fw-semibold'
    ]);
    
    if (subtotalElement) {
      subtotalElement.textContent = `₹${totalAmount.toFixed(2)}`;
    }
    
    // Find the total element - try multiple selectors
    const totalElement = findElement([
      '#orderSummary .d-flex:last-of-type .fs-5.fw-bold:last-child', 
      '#orderSummary .d-flex:nth-child(5) .fs-5.fw-bold',
      '#orderSummary .fs-5.fw-bold:last-child'
    ]);
    
    if (totalElement) {
      totalElement.textContent = `₹${totalAmount.toFixed(2)}`;
    }
    
    // Update item counts in the text
    if (cartCount !== undefined) {
      const itemCountElement = findElement([
        '#orderSummary .d-flex:first-child span:first-child',
        '#orderSummary .d-flex:nth-child(1) span:first-child'
      ]);
      
      if (itemCountElement) {
        itemCountElement.textContent = `Subtotal (${cartCount} items)`;
      }
      
      // Update cart items header
      const cartItemsHeader = document.querySelector('.cart-items h2');
      if (cartItemsHeader) {
        cartItemsHeader.textContent = `Items (${cartCount})`;
      }
    }
    
    // Last resort: force rebuild of entire order summary
    if (!subtotalElement || !totalElement) {
      rebuildOrderSummary(totalAmount, cartCount);
    }
    
    // Force browser reflow if needed
    orderSummary.style.display = 'none';
    orderSummary.offsetHeight; // Force reflow
    orderSummary.style.display = '';
  }
  
  // Helper function to find an element using multiple selectors
  function findElement(selectors) {
    for (const selector of selectors) {
      const element = document.querySelector(selector);
      if (element) {
        return element;
      }
    }
    return null;
  }
  
  // Last resort: completely rebuild the order summary
  function rebuildOrderSummary(totalAmount, cartCount) {
    // Only proceed if the order summary element exists
    if (!orderSummary) {
      return;
    }
    
    // Create HTML for the entire summary
    const summaryHTML = `
      <h2 class="fs-4 fw-bold mb-4">Order Summary</h2>
      
      <!-- Subtotal -->
      <div class="d-flex justify-content-between mb-3">
        <span>Subtotal (${cartCount || 0} items)</span>
        <span class="fw-semibold">₹${totalAmount.toFixed(2)}</span>
      </div>
      
      <!-- Shipping -->
      <div class="d-flex justify-content-between mb-3">
        <span>Shipping</span>
        <span class="fw-semibold">₹0</span>
      </div>
      
      <!-- Discount -->
      <div class="d-flex justify-content-between mb-3 text-success">
        <span>Discount</span>
        <!-- Placeholder for discount -->
      </div>
      
      <!-- Promo Code -->
      <div class="promo-code mb-4">
        <div class="input-group mb-2">
          <input type="text" class="form-control" placeholder="Enter promo code" aria-label="Promo code">
          <button class="btn btn-dark" type="button">Apply</button>
        </div>
        <!-- Placeholder for applied promo -->
      </div>
      
      <hr class="my-3">
      
      <!-- Total -->
      <div class="d-flex justify-content-between align-items-center mb-4">
        <span class="fs-5 fw-bold">Total</span>
        <span class="fs-5 fw-bold">₹${totalAmount.toFixed(2)}</span>
      </div>
      
      <!-- Checkout Button -->
      <a href="/checkout" class="btn btn-dark w-100 py-3 fw-medium">Proceed to Checkout</a>
      
      <!-- Payment Methods -->
      <div class="payment-methods mt-3 text-center">
        <p class="text-muted small mb-2">We accept</p>
        <div class="d-flex justify-content-center gap-2">
          <div class="payment-icon"><i class="ri-visa-line"></i></div>
          <div class="payment-icon"><i class="ri-mastercard-line"></i></div>
          <div class="payment-icon"><i class="ri-paypal-line"></i></div>
          <div class="payment-icon"><i class="ri-apple-line"></i></div>
        </div>
      </div>
    `;
    
    // Replace the content
    orderSummary.innerHTML = summaryHTML;
  }

  function handleOrderSummaryPosition() {
    if (!orderSummary) return;
    
    const parentContainer = orderSummary.closest('.col-lg-4');
    if (!parentContainer) return;
    
    const parentRect = parentContainer.getBoundingClientRect();
    const summaryHeight = orderSummary.offsetHeight;
    const windowHeight = window.innerHeight;
    
    if (window.innerWidth >= 992) {
      if (parentRect.top < 80 && parentRect.bottom > (summaryHeight + 80)) {
        orderSummary.classList.add('fixed');
        orderSummary.style.width = parentRect.width + 'px';
        orderSummary.style.maxHeight = (windowHeight - 100) + 'px';
        orderSummary.style.overflowY = summaryHeight > (windowHeight - 100) ? 'auto' : 'visible';
      } else {
        orderSummary.classList.remove('fixed');
        orderSummary.style.width = '';
        orderSummary.style.maxHeight = '';
        orderSummary.style.overflowY = '';
      }
    } else {
      orderSummary.classList.remove('fixed');
      orderSummary.style.width = '';
      orderSummary.style.maxHeight = '';
      orderSummary.style.overflowY = '';
    }
  }

  function showNotification(type, message) {
    Swal.fire({
      toast: true,
      position: 'top-end',
      icon: type,
      title: message,
      showConfirmButton: false,
      timer: 3000
    });
  }
});

// Add this CSS to provide visual feedback for cart updates
document.head.insertAdjacentHTML('beforeend', `
  <style>
    .cart-item.updating {
      opacity: 0.7;
      pointer-events: none;
      transition: opacity 0.2s ease;
    }
    
    .quantity-input:disabled {
      background-color: #f8f9fa;
    }
  </style>
`);
</script>