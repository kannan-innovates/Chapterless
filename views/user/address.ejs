<%- include("../partials/user/header") %>

<div class="container py-5">
  <!-- Breadcrumbs -->
  <nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/profile">My Account</a></li>
      <li class="breadcrumb-item active" aria-current="page">Address Book</li>
    </ol>
  </nav>

  <div class="row g-4">
    <%- include("../partials/user/accountSidebar") %>

    <!-- Main Content -->
    <div class="col-lg-9">
      <div class="card border-0 shadow-sm mb-4">
        <div
          class="card-header bg-white p-4 border-0 d-flex justify-content-between align-items-center"
        >
          <h4 class="mb-0">My Addresses</h4>
          <button
            class="btn btn-dark"
            data-bs-toggle="modal"
            data-bs-target="#addAddressModal"
          >
            <i class="bi bi-plus-lg me-2"></i>Add New Address
          </button>
        </div>
        <div class="card-body p-4">
          <!-- Address List -->
          <div class="row g-4" id="addressContainer">
            <% if (addresses && addresses.length > 0) { %> <%
            addresses.forEach(address => { %>
            <div class="col-md-6" data-address-id="<%= address._id %>">
              <div class="card h-100 border shadow-sm">
                <div class="card-body position-relative">
                  <% if (address.isDefault) { %>
                  <span
                    class="badge bg-success position-absolute end-0 top-0 mt-3 me-3"
                    >Default</span
                  >
                  <% } %>
                  <h5 class="mb-3"><%= address.fullName %></h5>
                  <p class="mb-1"><%= address.street %></p>
                  <p class="mb-1">
                    <%= address.district %>, <%= address.state %> - <%=
                    address.pincode %>
                  </p>
                  <% if (address.landmark) { %>
                  <p class="mb-1">Landmark: <%= address.landmark %></p>
                  <% } %>
                  <p class="mb-3">Phone: <%= address.phone %></p>
                  <div class="d-flex mt-auto gap-2">
                    <button
                      class="btn btn-sm btn-outline-dark edit-address-btn"
                      data-address-id="<%= address._id %>"
                    >
                      <i class="bi bi-pencil me-1"></i>Edit
                    </button>
                    <button
                      class="btn btn-sm btn-outline-danger delete-address-btn"
                      data-address-id="<%= address._id %>"
                    >
                      <i class="bi bi-trash me-1"></i>Delete
                    </button>
                    <% if (!address.isDefault) { %>
                    <button
                      class="btn btn-sm btn-outline-primary set-default-btn"
                      data-address-id="<%= address._id %>"
                    >
                      <i class="bi bi-check-circle me-1"></i>Set as Default
                    </button>
                    <% } %>
                  </div>
                </div>
              </div>
            </div>
            <% }); %> <% } else { %>
            <div class="col-12 text-center py-5">
              <div class="mb-4">
                <i
                  class="bi bi-geo-alt-fill text-muted"
                  style="font-size: 3rem"
                ></i>
              </div>
              <h5 class="text-muted mb-3">No addresses found</h5>
              <p class="text-muted mb-4">
                You haven't added any addresses yet.
              </p>
              <button
                class="btn btn-dark"
                data-bs-toggle="modal"
                data-bs-target="#addAddressModal"
              >
                <i class="bi bi-plus-lg me-2"></i>Add New Address
              </button>
            </div>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add Address Modal -->
<div
  class="modal fade"
  id="addAddressModal"
  tabindex="-1"
  aria-labelledby="addAddressModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header border-0">
        <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form id="addressForm">
          <input type="hidden" name="returnTo" value="<%= typeof returnTo !== 'undefined' ? returnTo : '' %>">
          <input type="hidden" id="addressId" name="addressId">
          <div class="row g-3">
            <div class="col-md-6">
              <label for="fullName" class="form-label">Full Name</label>
              <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                  <i class="bi bi-person"></i>
                </span>
                <input
                  type="text"
                  class="form-control border-start-0"
                  id="fullName"
                  name="fullName"
                  placeholder="Enter full name"
                  required
                />
              </div>
              <div id="fullNameError" class="text-danger small mt-1"></div>
            </div>

            <div class="col-md-6">
              <label for="phone" class="form-label">Phone Number</label>
              <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                  <i class="bi bi-telephone"></i>
                </span>
                <input
                  type="tel"
                  class="form-control border-start-0"
                  id="phone"
                  name="phone"
                  placeholder="+91 12345 67890"
                  required
                />
              </div>
              <div id="phoneError" class="text-danger small mt-1"></div>
            </div>

            <div class="col-md-6">
              <label for="pincode" class="form-label">PIN Code</label>
              <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                  <i class="bi bi-geo"></i>
                </span>
                <input
                  type="text"
                  class="form-control border-start-0"
                  id="pincode"
                  name="pincode"
                  placeholder="Enter 6-digit pincode"
                  required
                />
              </div>
              <div id="pincodeError" class="text-danger small mt-1"></div>
            </div>

            <div class="col-md-6">
              <label for="state" class="form-label">State</label>
              <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                  <i class="bi bi-geo-alt"></i>
                </span>
                <select
                  class="form-select border-start-0"
                  id="state"
                  name="state"
                  required
                >
                  <option value="" selected disabled>Select your state</option>
                  <option value="Andhra Pradesh">Andhra Pradesh</option>
                  <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                  <option value="Assam">Assam</option>
                  <option value="Bihar">Bihar</option>
                  <option value="Chhattisgarh">Chhattisgarh</option>
                  <option value="Goa">Goa</option>
                  <option value="Gujarat">Gujarat</option>
                  <option value="Haryana">Haryana</option>
                  <option value="Himachal Pradesh">Himachal Pradesh</option>
                  <option value="Jharkhand">Jharkhand</option>
                  <option value="Karnataka">Karnataka</option>
                  <option value="Kerala">Kerala</option>
                  <option value="Madhya Pradesh">Madhya Pradesh</option>
                  <option value="Maharashtra">Maharashtra</option>
                  <option value="Manipur">Manipur</option>
                  <option value="Meghalaya">Meghalaya</option>
                  <option value="Mizoram">Mizoram</option>
                  <option value="Nagaland">Nagaland</option>
                  <option value="Odisha">Odisha</option>
                  <option value="Punjab">Punjab</option>
                  <option value="Rajasthan">Rajasthan</option>
                  <option value="Sikkim">Sikkim</option>
                  <option value="Tamil Nadu">Tamil Nadu</option>
                  <option value="Telangana">Telangana</option>
                  <option value="Tripura">Tripura</option>
                  <option value="Uttar Pradesh">Uttar Pradesh</option>
                  <option value="Uttarakhand">Uttarakhand</option>
                  <option value="West Bengal">West Bengal</option>
                </select>
              </div>
              <div id="stateError" class="text-danger small mt-1"></div>
            </div>

            <div class="col-md-6">
              <label for="district" class="form-label">District</label>
              <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                  <i class="bi bi-geo-alt"></i>
                </span>
                <input
                  type="text"
                  class="form-control border-start-0"
                  id="district"
                  name="district"
                  placeholder="Enter your district"
                  required
                />
              </div>
              <div id="districtError" class="text-danger small mt-1"></div>
            </div>

            <div class="col-md-6">
              <label for="landmark" class="form-label"
                >Landmark (Optional)</label
              >
              <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                  <i class="bi bi-signpost"></i>
                </span>
                <input
                  type="text"
                  class="form-control border-start-0"
                  id="landmark"
                  name="landmark"
                  placeholder="Enter a nearby landmark"
                />
              </div>
            </div>

            <div class="col-12">
              <label for="street" class="form-label">Street Address</label>
              <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                  <i class="bi bi-house-door"></i>
                </span>
                <textarea
                  class="form-control border-start-0"
                  id="street"
                  name="street"
                  rows="2"
                  placeholder="Enter your complete address with house/building number, street, locality"
                  required
                ></textarea>
              </div>
              <div id="streetError" class="text-danger small mt-1"></div>
            </div>

            <div class="col-12">
              <div class="form-check mt-2">
                <input
                  class="form-check-input"
                  type="checkbox"
                  id="isDefault"
                  name="isDefault"
                />
                <label class="form-check-label" for="isDefault">
                  Set as default address
                </label>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer border-0">
        <button type="button" class="btn btn-light" data-bs-dismiss="modal">
          Cancel
        </button>
        <button
          type="submit"
          form="addressForm"
          class="btn btn-dark"
          id="saveAddressBtn"
        >
          <i class="bi bi-check-circle me-2"></i>Save Address
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Address Modal -->
<div
  class="modal fade"
  id="editAddressModal"
  tabindex="-1"
  aria-labelledby="editAddressModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header border-0">
        <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <!-- The form will be cloned from the add address form -->
      </div>
      <div class="modal-footer border-0">
        <button type="button" class="btn btn-light" data-bs-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn btn-dark" id="updateAddressBtn">
          <i class="bi bi-check-circle me-2"></i>Update Address
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Add Bootstrap Icons CDN -->
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css"
/>
<!-- Add SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
  /* Custom styling */
  .primary-bg {
    background-color: #f0f0f0;
    color: #1a1a1a;
    font-weight: 500;
  }

  .primary-bg:hover {
    background-color: #e5e5e5;
    color: #000;
  }

  .breadcrumb-item + .breadcrumb-item::before {
    content: "›";
    font-weight: bold;
  }

  .breadcrumb a {
    color: #333;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    color: #000;
    text-decoration: underline;
  }

  /* Profile image container */
  .profile-image-container {
    position: relative;
    width: 120px;
    height: 120px;
    margin: 0 auto;
  }

  .profile-image-container img {
    width: 120px;
    height: 120px;
    object-fit: cover;
  }

  @media (max-width: 991px) {
    .profile-sidebar {
      margin-bottom: 2rem;
    }
  }

  /* Card styling */
  .card {
    transition: transform 0.2s;
    border-radius: 10px;
  }

  .card-header {
    border-radius: 10px 10px 0 0 !important;
  }

  /* Validation styling */
  .is-valid {
    border-color: #198754 !important;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    padding-right: calc(1.5em + 0.75rem) !important;
  }

  .is-invalid {
    border-color: #dc3545 !important;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    padding-right: calc(1.5em + 0.75rem) !important;
  }

  /* Address card specific styling */
  .card-body h5 {
    font-weight: 600;
  }

  .card-body p {
    margin-bottom: 0.5rem;
    color: #4a4a4a;
  }

  /* Address card styling for checkout compatibility */
  .address-card {
    cursor: pointer;
    transition: all 0.2s ease;
    border: 1px solid #dee2e6;
  }

  .address-card:hover {
    border-color: #adb5bd;
  }

  .address-card.selected {
    border-color: #212529;
    box-shadow: 0 0 0 1px #212529;
  }
</style>

<script>
  // Validation helper functions
  function setInvalid(element, errorElement, message) {
    element.classList.add("is-invalid");
    element.classList.remove("is-valid");
    errorElement.textContent = message;
  }

  function setValid(element, errorElement) {
    element.classList.add("is-valid");
    element.classList.remove("is-invalid");
    errorElement.textContent = "";
  }

  function clearValidation(element, errorElement) {
    element.classList.remove("is-invalid", "is-valid");
    errorElement.textContent = "";
  }

  // Full Name validation
  function validateFullName(fullName) {
    const trimmedName = fullName.trim();
    if (trimmedName.length < 3) return false;
    return /^[A-Za-z\s'-]+$/.test(trimmedName);
  }

  // Phone Number validation
  function validatePhoneNumber(phoneNumber) {
    const cleanPhone = phoneNumber.replace(/\D/g, "");
    if (cleanPhone.length !== 10) {
      return false;
    }
    if (
      /^(.)\1+$/.test(cleanPhone) ||
      /^0{10}$/.test(cleanPhone) ||
      /^1{10}$/.test(cleanPhone)
    ) {
      return false;
    }
    return true;
  }

  // Pincode validation
  function validatePincode(pincode) {
    const cleanPincode = pincode.replace(/\D/g, "");
    return cleanPincode.length === 6 && /^\d+$/.test(cleanPincode);
  }

  // Toast configuration
  const Toast = Swal.mixin({
    toast: true,
    position: "bottom-end",
    showConfirmButton: false,
    timer: 3000,
    timerProgressBar: true,
    didOpen: (toast) => {
      toast.addEventListener("mouseenter", Swal.stopTimer);
      toast.addEventListener("mouseleave", Swal.resumeTimer);
    },
  });

  // Form validation
  const addressForm = document.getElementById("addressForm");
  const fullNameInput = document.getElementById("fullName");
  const phoneInput = document.getElementById("phone");
  const pincodeInput = document.getElementById("pincode");
  const districtInput = document.getElementById("district");
  const stateInput = document.getElementById("state");
  const streetInput = document.getElementById("street");
  const addressIdInput = document.getElementById("addressId");

  const fullNameError = document.getElementById("fullNameError");
  const phoneError = document.getElementById("phoneError");
  const pincodeError = document.getElementById("pincodeError");
  const districtError = document.getElementById("districtError");
  const stateError = document.getElementById("stateError");
  const streetError = document.getElementById("streetError");

  // Add input validation event listeners
  fullNameInput.addEventListener("input", function () {
    const fullName = this.value.trim();
    if (!fullName) {
      clearValidation(this, fullNameError);
    } else if (!validateFullName(fullName)) {
      setInvalid(
        this,
        fullNameError,
        "Please enter a valid name (min 3 characters)"
      );
    } else {
      setValid(this, fullNameError);
    }
  });

  phoneInput.addEventListener("input", function () {
    const phone = this.value.trim();
    if (!phone) {
      clearValidation(this, phoneError);
    } else if (!validatePhoneNumber(phone)) {
      setInvalid(
        this,
        phoneError,
        "Please enter a valid 10-digit phone number"
      );
    } else {
      setValid(this, phoneError);
    }
  });

  pincodeInput.addEventListener("input", function () {
    const pincode = this.value.trim();
    if (!pincode) {
      clearValidation(this, pincodeError);
    } else if (!validatePincode(pincode)) {
      setInvalid(this, pincodeError, "Please enter a valid 6-digit pincode");
    } else {
      setValid(this, pincodeError);
    }
  });

  districtInput.addEventListener("input", function () {
    const district = this.value.trim();
    if (!district) {
      clearValidation(this, districtError);
    } else if (district.length < 3) {
      setInvalid(
        this,
        districtError,
        "District name must be at least 3 characters"
      );
    } else {
      setValid(this, districtError);
    }
  });

  stateInput.addEventListener("change", function () {
    const state = this.value;
    if (!state) {
      clearValidation(this, stateError);
    } else {
      setValid(this, stateError);
    }
  });

  streetInput.addEventListener("input", function () {
    const street = this.value.trim();
    if (!street) {
      clearValidation(this, streetError);
    } else if (street.length < 10) {
      setInvalid(
        this,
        streetError,
        "Please enter a complete address (min 10 characters)"
      );
    } else {
      setValid(this, streetError);
    }
  });

  // Reset form
  function resetForm() {
    addressForm.reset();
    document.getElementById("addressId").value = "";
    const isDefaultCheckbox = document.getElementById("isDefault");
    isDefaultCheckbox.disabled = false;

    clearValidation(fullNameInput, fullNameError);
    clearValidation(phoneInput, phoneError);
    clearValidation(pincodeInput, pincodeError);
    clearValidation(districtInput, districtError);
    clearValidation(stateInput, stateError);
    clearValidation(streetInput, streetError);
  }

  // Validate form
  function validateForm() {
    const fullName = fullNameInput.value.trim();
    const phone = phoneInput.value.trim();
    const pincode = pincodeInput.value.trim();
    const district = districtInput.value.trim();
    const state = stateInput.value;
    const street = streetInput.value.trim();

    let isValid = true;

    if (!fullName || !validateFullName(fullName)) {
      setInvalid(fullNameInput, fullNameError, "Valid full name is required");
      isValid = false;
    }

    if (!phone || !validatePhoneNumber(phone)) {
      setInvalid(phoneInput, phoneError, "Valid phone number is required");
      isValid = false;
    }

    if (!pincode || !validatePincode(pincode)) {
      setInvalid(
        pincodeInput,
        pincodeError,
        "Valid 6-digit pincode is required"
      );
      isValid = false;
    }

    if (!district || district.length < 3) {
      setInvalid(districtInput, districtError, "District is required");
      isValid = false;
    }

    if (!state) {
      setInvalid(stateInput, stateError, "Please select a state");
      isValid = false;
    }

    if (!street || street.length < 10) {
      setInvalid(streetInput, streetError, "Complete address is required");
      isValid = false;
    }

    return isValid;
  }

  // Get form data
  function getFormData() {
    return {
      fullName: fullNameInput.value.trim(),
      phone: phoneInput.value.trim(),
      pincode: pincodeInput.value.trim(),
      district: districtInput.value.trim(),
      state: stateInput.value,
      street: streetInput.value.trim(),
      landmark: document.getElementById("landmark").value.trim(),
      isDefault: document.getElementById("isDefault").checked,
      returnTo: document.querySelector('input[name="returnTo"]').value
    };
  }

  // Add new address
  async function addAddress(formData) {
    try {
      const response = await fetch("/address", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Failed to add address");
      }

      return data;
    } catch (error) {
      console.error("Error adding address:", error);
      throw error;
    }
  }

  // Update existing address
  async function updateAddress(addressId, formData) {
    try {
      const response = await fetch(`/address/${addressId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Failed to update address");
      }

      return data;
    } catch (error) {
      console.error("Error updating address:", error);
      throw error;
    }
  }

  // Delete address
  async function deleteAddress(addressId) {
    try {
      const response = await fetch(`/address/${addressId}`, {
        method: "DELETE",
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Failed to delete address");
      }

      return data;
    } catch (error) {
      console.error("Error deleting address:", error);
      throw error;
    }
  }

  // Set address as default
  async function setDefaultAddress(addressId) {
    try {
      const response = await fetch(`/address/${addressId}/default`, {
        method: "PATCH",
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Failed to set default address");
      }

      return data;
    } catch (error) {
      console.error("Error setting default address:", error);
      throw error;
    }
  }

  // Create address card HTML
  function createAddressCard(address, isSelected = false) {
    return `
      <div class="col-md-6" data-address-id="${address._id}">
        <div class="card h-100 border shadow-sm address-card ${isSelected ? 'selected' : ''}">
          <div class="card-body position-relative">
            ${
              address.isDefault
                ? '<span class="badge bg-success position-absolute end-0 top-0 mt-3 me-3">Default</span>'
                : ""
            }
            <div class="form-check position-absolute start-0 top-0 mt-3 ms-3">
              <input class="form-check-input" type="radio" name="selectedAddress" id="address${address._id}" value="${address._id}" ${isSelected ? 'checked' : ''}>
              <label class="form-check-label" for="address${address._id}"></label>
            </div>
            <div class="ps-4">
              <h5 class="mb-3">${address.fullName}</h5>
              <p class="mb-1">${address.street}</p>
              <p class="mb-1">${address.district}, ${address.state} - ${address.pincode}</p>
              ${
                address.landmark
                  ? `<p class="mb-1">Landmark: ${address.landmark}</p>`
                  : ""
              }
              <p class="mb-3">Phone: ${address.phone}</p>
            </div>
            <div class="d-flex mt-auto gap-2">
              <button class="btn btn-sm btn-outline-dark edit-address-btn" data-address-id="${address._id}">
                <i class="bi bi-pencil me-1"></i>Edit
              </button>
              <button class="btn btn-sm btn-outline-danger delete-address-btn" data-address-id="${address._id}">
                <i class="bi bi-trash me-1"></i>Delete
              </button>
              ${
                !address.isDefault
                  ? `
                <button class="btn btn-sm btn-outline-primary set-default-btn" data-address-id="${address._id}">
                  <i class="bi bi-check-circle me-1"></i>Set as Default
                </button>
              `
                  : ""
              }
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Fill form with address data for editing
  function fillFormWithAddressData(address) {
    fullNameInput.value = address.fullName;
    phoneInput.value = address.phone;
    pincodeInput.value = address.pincode;
    districtInput.value = address.district;
    stateInput.value = address.state;
    streetInput.value = address.street;
    document.getElementById("landmark").value = address.landmark || "";
    const isDefaultCheckbox = document.getElementById("isDefault");
    isDefaultCheckbox.checked = address.isDefault;
    addressIdInput.value = address._id;

    if (address.isDefault) {
      isDefaultCheckbox.disabled = true;
    } else {
      isDefaultCheckbox.disabled = false;
    }

    fullNameInput.dispatchEvent(new Event("input"));
    phoneInput.dispatchEvent(new Event("input"));
    pincodeInput.dispatchEvent(new Event("input"));
    districtInput.dispatchEvent(new Event("input"));
    stateInput.dispatchEvent(new Event("change"));
    streetInput.dispatchEvent(new Event("input"));
  }

  // Get address by ID
  async function getAddressById(addressId) {
    try {
      const response = await fetch(`/address/${addressId}`);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Failed to get address");
      }

      return data.address;
    } catch (error) {
      console.error("Error getting address:", error);
      throw error;
    }
  }

  // Form submission
  addressForm.addEventListener("submit", async function (event) {
    event.preventDefault();

    if (!validateForm()) return;

    const formData = getFormData();
    const addressId = addressIdInput.value;
    const isEditing = !!addressId;

    const submitButton = document.getElementById("saveAddressBtn");
    const originalText = submitButton.innerHTML;
    submitButton.disabled = true;
    submitButton.innerHTML =
      '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';

    try {
      let result;

      if (isEditing) {
        result = await updateAddress(addressId, formData);

        const addressCard = document.querySelector(
          `[data-address-id="${addressId}"]`
        );
        if (addressCard) {
          addressCard.outerHTML = createAddressCard(result.address);
        }

        Toast.fire({
          icon: "success",
          title: "Address updated successfully",
        });
      } else {
        result = await addAddress(formData);

        if (result.redirect) {
          Toast.fire({
            icon: "success",
            title: "Address added successfully",
          });
          setTimeout(() => {
            window.location.href = result.redirect;
          }, 1000);
        } else {
          const addressContainer = document.getElementById("addressContainer");
          const noAddressesMessage = addressContainer.querySelector(
            ".col-12.text-center"
          );

          if (noAddressesMessage) {
            addressContainer.innerHTML = "";
          }

          const addressCardHTML = createAddressCard(result.address, formData.returnTo === 'checkout');
          addressContainer.insertAdjacentHTML("afterbegin", addressCardHTML);

          Toast.fire({
            icon: "success",
            title: "Address added successfully",
          });
        }
      }

      const modal = bootstrap.Modal.getInstance(
        document.getElementById("addAddressModal")
      );
      modal.hide();
      resetForm();

      if (formData.isDefault && !result.redirect) {
        setTimeout(() => {
          location.reload();
        }, 1000);
      }

      if (!result.redirect) {
        addEventListenersToButtons();
      }
    } catch (error) {
      console.error("Address save error:", error);

      Toast.fire({
        icon: "error",
        title: error.message || "Server error. Please try again.",
      });
    } finally {
      submitButton.disabled = false;
      submitButton.innerHTML = originalText;
    }
  });

  // Add event listeners to address action buttons
  function addEventListenersToButtons() {
    document.querySelectorAll(".delete-address-btn").forEach((button) => {
      button.addEventListener("click", async function () {
        const addressId = this.getAttribute("data-address-id");

        Swal.fire({
          title: "Delete Address?",
          text: "This action cannot be undone.",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#dc3545",
          cancelButtonColor: "#6c757d",
          confirmButtonText: "Yes, delete it!",
        }).then(async (result) => {
          if (result.isConfirmed) {
            try {
              await deleteAddress(addressId);

              const addressCard = document.querySelector(
                `[data-address-id="${addressId}"]`
              );
              if (addressCard) {
                addressCard.remove();
              }

              const addressContainer =
                document.getElementById("addressContainer");
              if (addressContainer.children.length === 0) {
                addressContainer.innerHTML = `
                  <div class="col-12 text-center py-5">
                    <div class="mb-4">
                      <i class="bi bi-geo-alt-fill text-muted" style="font-size: 3rem;"></i>
                    </div>
                    <h5 class="text-muted mb-3">No addresses found</h5>
                    <p class="text-muted mb-4">You haven't added any addresses yet.</p>
                    <button class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                      <i class="bi bi-plus-lg me-2"></i>Add New Address
                    </button>
                  </div>
                `;
              }

              Toast.fire({
                icon: "success",
                title: "Address deleted successfully",
              });
            } catch (error) {
              Toast.fire({
                icon: "error",
                title: error.message || "Failed to delete address",
              });
            }
          }
        });
      });
    });

    document.querySelectorAll(".set-default-btn").forEach((button) => {
      button.addEventListener("click", async function () {
        const addressId = this.getAttribute("data-address-id");

        try {
          await setDefaultAddress(addressId);

          Toast.fire({
            icon: "success",
            title: "Address set as default",
          });

          setTimeout(() => {
            location.reload();
          }, 1000);
        } catch (error) {
          Toast.fire({
            icon: "error",
            title: error.message || "Failed to set default address",
          });
        }
      });
    });

    document.querySelectorAll(".edit-address-btn").forEach((button) => {
      button.addEventListener("click", async function () {
        const addressId = this.getAttribute("data-address-id");

        try {
          const address = await getAddressById(addressId);
          fillFormWithAddressData(address);

          const modal = new bootstrap.Modal(
            document.getElementById("addAddressModal")
          );
          modal.show();

          document.getElementById("addAddressModalLabel").textContent =
            "Edit Address";
        } catch (error) {
          console.error("Error editing address:", error);
          Toast.fire({
            icon: "error",
            title: "Failed to edit address",
          });
        }
      });
    });
  }

  // Initialize event listeners
  document.addEventListener("DOMContentLoaded", function () {
    addEventListenersToButtons();

    document
      .getElementById("addAddressModal")
      .addEventListener("hidden.bs.modal", function () {
        resetForm();
        document.getElementById("addAddressModalLabel").textContent =
          "Add New Address";
      });
  });
</script>

<%- include("../partials/user/footer") %>