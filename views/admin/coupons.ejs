<%- include('../partials/admin/sidebar') %>
<div class="main-content">
  <div class="page-header d-flex justify-content-between align-items-center">
    <div>
      <h1 class="page-title">Manage Coupons</h1>
      <p class="text-muted mb-0">View and manage discount coupons</p>
    </div>
    <div class="d-flex align-items-center">
      <div class="search-container me-3">
        <i class="ri-search-line search-icon"></i>
        <input type="text" id="couponSearch" class="search-input" placeholder="Search coupons..." value="<%= filters.search %>">
      </div>
      <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCouponModal">
        <i class="ri-add-line me-1"></i> Add New Coupon
      </button>
      <button class="toggle-sidebar d-lg-none ms-2">
        <i class="ri-menu-line"></i>
      </button>
    </div>
  </div>

  <!-- Coupon Filters -->
  <div class="filters-container mb-3">
    <div class="d-flex flex-wrap gap-2">
      <select class="form-select filter-select" id="statusFilter">
        <option value="all" <%= filters.status === 'all' ? 'selected' : '' %>>All Status</option>
        <option value="active" <%= filters.status === 'active' ? 'selected' : '' %>>Active</option>
        <option value="inactive" <%= filters.status === 'inactive' ? 'selected' : '' %>>Inactive</option>
        <option value="expired" <%= filters.status === 'expired' ? 'selected' : '' %>>Expired</option>
      </select>
      <select class="form-select filter-select" id="typeFilter">
        <option value="all" <%= filters.type === 'all' ? 'selected' : '' %>>All Types</option>
        <option value="percentage" <%= filters.type === 'percentage' ? 'selected' : '' %>>Percentage</option>
        <option value="fixed" <%= filters.type === 'fixed' ? 'selected' : '' %>>Fixed Amount</option>
      </select>
    </div>
  </div>

  <!-- Coupons Table Card -->
  <div class="content-card">
    <div class="table-responsive">
      <table class="coupons-table" id="couponsTable">
        <thead>
          <tr>
            <th>Code</th>
            <th>Discount</th>
            <th>Min Order</th>
            <th>Validity</th>
            <th>Usage</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% if (coupons && coupons.length > 0) { %>
            <% coupons.forEach(coupon => { %>
              <% 
                const isExpired = new Date(coupon.expiryDate) < new Date();
                const status = isExpired ? 'expired' : (coupon.isActive ? 'active' : 'inactive');
              %>
              <tr data-coupon-id="<%= coupon._id %>">
                <td class="coupon-code"><%= coupon.code %></td>
                <td>
                  <% if (coupon.discountType === 'percentage') { %>
                    <%= coupon.discountValue %>% (Max ₹<%= coupon.maxDiscountValue || 'Unlimited' %>)
                  <% } else { %>
                    ₹<%= coupon.discountValue %> Off
                  <% } %>
                </td>
                <td>₹<%= coupon.minOrderAmount %></td>
                <td>
                  <div class="validity-dates">
                    <div>From: <span><%= new Date(coupon.startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %></span></div>
                    <div>To: <span><%= new Date(coupon.expiryDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %></span></div>
                  </div>
                </td>
                <td>
                  <%= coupon.usedCount %> / <%= coupon.usageLimitGlobal || 'Unlimited' %>
                </td>
                <td>
                  <span class="status-badge <%= status %>">
                    <%= status.charAt(0).toUpperCase() + status.slice(1) %>
                  </span>
                </td>
                <td>
                  <div class="action-buttons">
                    <button class="btn-icon btn-edit-coupon" data-bs-toggle="modal" data-bs-target="#editCouponModal" data-coupon-id="<%= coupon._id %>" title="Edit">
                      <i class="ri-pencil-line"></i>
                    </button>
                    <button class="btn-icon btn-toggle-status" data-coupon-id="<%= coupon._id %>" title="<%= coupon.isActive ? 'Deactivate' : 'Activate' %>">
                      <i class="ri-<%= coupon.isActive ? 'eye-off' : 'eye' %>-line"></i>
                    </button>
                    <button class="btn-icon btn-view-details" data-bs-toggle="modal" data-bs-target="#viewCouponModal" data-coupon-id="<%= coupon._id %>" title="View Details">
                      <i class="ri-information-line"></i>
                    </button>
                  </div>
                </td>
              </tr>
            <% }) %>
          <% } else { %>
            <tr>
              <td colspan="7" class="text-center text-muted">No coupons found.</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <!-- Pagination -->
    <div class="d-flex justify-content-between align-items-center p-3">
      <div class="text-muted small">
        Showing <%= pagination.start %>-<%= pagination.end %> of <%= pagination.totalCoupons %> coupons
      </div>
      <nav aria-label="Coupon pagination">
        <ul class="pagination mb-0">
          <li class="page-item <%= pagination.hasPrev ? '' : 'disabled' %>">
            <a class="page-link" href="?page=<%= pagination.prevPage %>&status=<%= filters.status %>&type=<%= filters.type %>&search=<%= filters.search %>" aria-label="Previous">
              <span aria-hidden="true">«</span>
            </a>
          </li>
          <% pagination.pages.forEach(page => { %>
            <li class="page-item <%= page === pagination.currentPage ? 'active' : '' %>">
              <a class="page-link" href="?page=<%= page %>&status=<%= filters.status %>&type=<%= filters.type %>&search=<%= filters.search %>"><%= page %></a>
            </li>
          <% }) %>
          <li class="page-item <%= pagination.hasNext ? '' : 'disabled' %>">
            <a class="page-link" href="?page=<%= pagination.nextPage %>&status=<%= filters.status %>&type=<%= filters.type %>&search=<%= filters.search %>" aria-label="Next">
              <span aria-hidden="true">»</span>
            </a>
          </li>
        </ul>
      </nav>
    </div>
  </div>
</div>

<!-- Add Coupon Modal -->
<div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addCouponModalLabel">Add New Coupon</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addCouponForm">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="couponCode" class="form-label">Coupon Code*</label>
              <input type="text" class="form-control" id="couponCode" placeholder="e.g. SUMMER20" required>
              <small class="text-muted">Must be unique and uppercase</small>
            </div>
            <div class="col-md-6 mb-3">
              <label for="couponStatus" class="form-label">Status</label>
              <select class="form-select" id="couponStatus">
                <option value="true" selected>Active</option>
                <option value="false">Inactive</option>
              </select>
            </div>
          </div>

          <div class="mb-3">
            <label for="couponDescription" class="form-label">Description</label>
            <textarea class="form-control" id="couponDescription" rows="2" placeholder="Brief description of the coupon"></textarea>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="discountType" class="form-label">Discount Type*</label>
              <select class="form-select" id="discountType" required>
                <option value="percentage">Percentage Discount</option>
                <option value="fixed">Fixed Amount Discount</option>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label for="discountValue" class="form-label">Discount Value*</label>
              <div class="input-group">
                <span class="input-group-text discount-symbol">%</span>
                <input type="number" class="form-control" id="discountValue" min="0" step="1" required>
              </div>
            </div>
          </div>

          <div class="row percentage-options">
            <div class="col-md-6 mb-3">
              <label for="maxDiscountValue" class="form-label">Maximum Discount</label>
              <div class="input-group">
                <span class="input-group-text">₹</span>
                <input type="number" class="form-control" id="maxDiscountValue" min="0">
              </div>
              <small class="text-muted">For percentage discounts</small>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="minOrderAmount" class="form-label">Minimum Order Amount</label>
              <div class="input-group">
                <span class="input-group-text">₹</span>
                <input type="number" class="form-control" id="minOrderAmount" min="0" value="0">
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="startDate" class="form-label">Start Date*</label>
              <input type="date" class="form-control" id="startDate" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="expiryDate" class="form-label">Expiry Date*</label>
              <input type="date" class="form-control" id="expiryDate" required>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="usageLimitGlobal" class="form-label">Global Usage Limit</label>
              <input type="number" class="form-control" id="usageLimitGlobal" min="0" placeholder="Leave blank for unlimited">
            </div>
            <div class="col-md-6 mb-3">
              <label for="usageLimitPerUser" class="form-label">Usage Limit Per User</label>
              <input type="number" class="form-control" id="usageLimitPerUser" min="1" value="1">
            </div>
          </div>

          <div class="mb-3">
            <label class="form-label">Applicable Categories</label>
            <div class="categories-container p-2 border rounded">
              <div class="form-check">
                <input class="form-check-input" type="checkbox" value="all" id="addAllCategories" checked>
                <label class="form-check-label" for="addAllCategories">
                  All Categories
                </label>
              </div>
              <hr>
              <div class="category-checkboxes">
                <% if (categories && categories.length > 0) { %>
                  <% categories.forEach(category => { %>
                    <div class="form-check">
                      <input class="form-check-input category-checkbox" type="checkbox" value="<%= category._id %>" id="addCategory_<%= category._id %>" disabled>
                      <label class="form-check-label" for="addCategory_<%= category._id %>">
                        <%= category.name %>
                      </label>
                    </div>
                  <% }) %>
                <% } else { %>
                  <div class="text-muted fst-italic small">No categories available.</div>
                <% } %>
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label class="form-label">Applicable Products</label>
            <div class="products-container p-2 border rounded">
              <div class="form-check">
                <input class="form-check-input" type="checkbox" value="all" id="addAllProducts" checked>
                <label class="form-check-label" for="addAllProducts">
                  All Products
                </label>
              </div>
              <hr>
              <div class="product-search mb-2">
                <input type="text" class="form-control form-control-sm" id="addProductSearch" placeholder="Search products..." disabled>
              </div>
              <div class="product-checkboxes" id="addProductCheckboxes">
                <% if (products && products.length > 0) { %>
                  <% products.forEach(product => { %>
                    <div class="form-check">
                      <input class="form-check-input product-checkbox" type="checkbox" value="<%= product._id %>" id="addProduct_<%= product._id %>" disabled>
                      <label class="form-check-label" for="addProduct_<%= product._id %>">
                        <%= product.title %>
                      </label>
                    </div>
                  <% }) %>
                <% } else { %>
                  <div class="text-muted fst-italic small">No products available.</div>
                <% } %>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="createCouponBtn">Create Coupon</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Coupon Modal -->
<div class="modal fade" id="editCouponModal" tabindex="-1" aria-labelledby="editCouponModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editCouponModalLabel">Edit Coupon</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editCouponForm">
          <input type="hidden" id="editCouponId">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editCouponCode" class="form-label">Coupon Code*</label>
              <input type="text" class="form-control" id="editCouponCode" required>
              <small class="text-muted">Must be unique and uppercase</small>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editCouponStatus" class="form-label">Status</label>
              <select class="form-select" id="editCouponStatus">
                <option value="true">Active</option>
                <option value="false">Inactive</option>
              </select>
            </div>
          </div>
          <div class="mb-3">
            <label for="editCouponDescription" class="form-label">Description</label>
            <textarea class="form-control" id="editCouponDescription" rows="2"></textarea>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editDiscountType" class="form-label">Discount Type*</label>
              <select class="form-select" id="editDiscountType" required>
                <option value="percentage">Percentage Discount</option>
                <option value="fixed">Fixed Amount Discount</option>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editDiscountValue" class="form-label">Discount Value*</label>
              <div class="input-group">
                <span class="input-group-text edit-discount-symbol">%</span>
                <input type="number" class="form-control" id="editDiscountValue" min="0" step="1" required>
              </div>
            </div>
          </div>
          <div class="row edit-percentage-options">
            <div class="col-md-6 mb-3">
              <label for="editMaxDiscountValue" class="form-label">Maximum Discount</label>
              <div class="input-group">
                <span class="input-group-text">₹</span>
                <input type="number" class="form-control" id="editMaxDiscountValue" min="0">
              </div>
              <small class="text-muted">For percentage discounts</small>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editMinOrderAmount" class="form-label">Minimum Order Amount</label>
              <div class="input-group">
                <span class="input-group-text">₹</span>
                <input type="number" class="form-control" id="editMinOrderAmount" min="0">
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editStartDate" class="form-label">Start Date*</label>
              <input type="date" class="form-control" id="editStartDate" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editExpiryDate" class="form-label">Expiry Date*</label>
              <input type="date" class="form-control" id="editExpiryDate" required>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editUsageLimitGlobal" class="form-label">Global Usage Limit</label>
              <input type="number" class="form-control" id="editUsageLimitGlobal" min="0" placeholder="Leave blank for unlimited">
            </div>
            <div class="col-md-6 mb-3">
              <label for="editUsageLimitPerUser" class="form-label">Usage Limit Per User</label>
              <input type="number" class="form-control" id="editUsageLimitPerUser" min="1" value="1">
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">Applicable Categories</label>
            <div class="categories-container p-2 border rounded">
              <div class="form-check">
                <input class="form-check-input" type="checkbox" value="all" id="editAllCategories">
                <label class="form-check-label" for="editAllCategories">
                  All Categories
                </label>
              </div>
              <hr>
              <div class="category-checkboxes">
                <% if (categories && categories.length > 0) { %>
                  <% categories.forEach(category => { %>
                    <div class="form-check">
                      <input class="form-check-input edit-category-checkbox" type="checkbox" value="<%= category._id %>" id="editCategory_<%= category._id %>">
                      <label class="form-check-label" for="editCategory_<%= category._id %>">
                        <%= category.name %>
                      </label>
                    </div>
                  <% }) %>
                <% } else { %>
                  <div class="text-muted fst-italic small">No categories available.</div>
                <% } %>
              </div>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">Applicable Products</label>
            <div class="products-container p-2 border rounded">
              <div class="form-check">
                <input class="form-check-input" type="checkbox" value="all" id="editAllProducts">
                <label class="form-check-label" for="editAllProducts">
                  All Products
                </label>
              </div>
              <hr>
              <div class="product-search mb-2">
                <input type="text" class="form-control form-control-sm" id="editProductSearch" placeholder="Search products...">
              </div>
              <div class="product-checkboxes" id="editProductCheckboxes">
                <% if (products && products.length > 0) { %>
                  <% products.forEach(product => { %>
                    <div class="form-check">
                      <input class="form-check-input edit-product-checkbox" type="checkbox" value="<%= product._id %>" id="editProduct_<%= product._id %>">
                      <label class="form-check-label" for="editProduct_<%= product._id %>">
                        <%= product.title %>
                      </label>
                    </div>
                  <% }) %>
                <% } else { %>
                  <div class="text-muted fst-italic small">No products available.</div>
                <% } %>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="updateCouponBtn">Update Coupon</button>
      </div>
    </div>
  </div>
</div>

<!-- View Coupon Details Modal -->
<div class="modal fade" id="viewCouponModal" tabindex="-1" aria-labelledby="viewCouponModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="viewCouponModalLabel">Coupon Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="coupon-details">
          <div class="detail-row">
            <div class="detail-label">Code:</div>
            <div class="detail-value" id="viewCouponCode"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Description:</div>
            <div class="detail-value" id="viewCouponDescription"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Discount:</div>
            <div class="detail-value" id="viewCouponDiscount"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Min Order Amount:</div>
            <div class="detail-value" id="viewMinOrderAmount"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Valid From:</div>
            <div class="detail-value" id="viewStartDate"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Valid Until:</div>
            <div class="detail-value" id="viewExpiryDate"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Usage:</div>
            <div class="detail-value" id="viewUsage"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Per User Limit:</div>
            <div class="detail-value" id="viewUsageLimitPerUser"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Status:</div>
            <div class="detail-value" id="viewStatus"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Applies To:</div>
            <div class="detail-value" id="viewAppliesTo"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Created:</div>
            <div class="detail-value" id="viewCreatedAt"></div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary btn-edit-from-view" data-bs-toggle="modal" data-bs-target="#editCouponModal">Edit</button>
      </div>
    </div>
  </div>
</div>

<style>
  /* Additional CSS for the Coupon page */
  .content-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
  }
  
  .search-container {
    position: relative;
  }
  
  .search-icon {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: #6c757d;
  }
  
  .search-input {
    padding: 8px 10px 8px 35px;
    border-radius: 6px;
    border: 1px solid #ddd;
    width: 250px;
  }
  
  .filter-select {
    width: auto;
    min-width: 150px;
  }
  
  .filters-container {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .coupons-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .coupons-table th, 
  .coupons-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #eee;
  }
  
  .coupons-table th {
    background-color: #f8f9fa;
    font-weight: 600;
  }
  
  .coupon-code {
    font-family: monospace;
    font-weight: 600;
    letter-spacing: 0.5px;
  }
  
  .validity-dates {
    font-size: 13px;
  }
  
  .status-badge {
    display: inline-block;
    padding: 3px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
  }
  
  .status-badge.active {
    background-color: #e1f7e1;
    color: #28a745;
  }
  
  .status-badge.inactive {
    background-color: #f8f9fa;
    color: #6c757d;
  }
  
  .status-badge.expired {
    background-color: #fff3cd;
    color: #856404;
  }
  
  .action-buttons {
    display: flex;
    gap: 5px;
  }
  
  .btn-icon {
    background: none;
    border: none;
    padding: 5px;
    cursor: pointer;
    color: #6c757d;
    border-radius: 4px;
    transition: all 0.2s;
  }
  
  .btn-icon:hover {
    background-color: #f8f9fa;
    color: #4361EE;
  }
  
  /* Modal Styles */
  .modal-title {
    font-weight: 600;
  }
  
  .categories-container, 
  .products-container {
    max-height: 200px;
    overflow-y: auto;
  }
  
  /* Coupon details in view modal */
  .coupon-details {
    padding: 10px;
  }
  
  .detail-row {
    display: flex;
    margin-bottom: 10px;
    border-bottom: 1px solid #f1f1f1;
    padding-bottom: 8px;
  }
  
  .detail-label {
    width: 40%;
    font-weight: 500;
    color: #495057;
  }
  
  .detail-value {
    width: 60%;
  }
  
  /* Responsive adjustments */
  @media (max-width: 992px) {
    .search-input {
      width: 180px;
    }
    
    .filters-container {
      flex-direction: column;
      align-items: stretch;
    }
    
    .filter-select {
      width: 100%;
    }
  }
  
  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .page-header > div:last-child {
      margin-top: 15px;
      width: 100%;
    }
    
    .search-input {
      width: 100%;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Discount type toggle for Add Coupon Modal
    const discountType = document.getElementById('discountType');
    const discountSymbol = document.querySelector('#addCouponModal .discount-symbol');
    const percentageOptions = document.querySelector('#addCouponModal .percentage-options');
    
    if (discountType && discountSymbol) {
      discountType.addEventListener('change', function() {
        if (this.value === 'percentage') {
          discountSymbol.textContent = '%';
          percentageOptions.style.display = 'flex';
        } else {
          discountSymbol.textContent = '₹';
          percentageOptions.style.display = 'none';
        }
      });
    }

    // Discount type toggle for Edit Coupon Modal
    const editDiscountType = document.getElementById('editDiscountType');
    const editDiscountSymbol = document.querySelector('#editCouponModal .edit-discount-symbol');
    const editPercentageOptions = document.querySelector('#editCouponModal .edit-percentage-options');
    
    if (editDiscountType && editDiscountSymbol) {
      editDiscountType.addEventListener('change', function() {
        if (this.value === 'percentage') {
          editDiscountSymbol.textContent = '%';
          editPercentageOptions.style.display = 'flex';
        } else {
          editDiscountSymbol.textContent = '₹';
          editPercentageOptions.style.display = 'none';
        }
      });
    }

    // Category checkbox functionality for Add Coupon Modal
    const addAllCategories = document.getElementById('addAllCategories');
    const addCategoryCheckboxes = document.querySelectorAll('#addCouponModal .category-checkbox');
    
    if (addAllCategories) {
      addAllCategories.addEventListener('change', function() {
        addCategoryCheckboxes.forEach(checkbox => {
          checkbox.disabled = this.checked;
          if (this.checked) checkbox.checked = false;
        });
      });
    }

    // Category checkbox functionality for Edit Coupon Modal
    const editAllCategories = document.getElementById('editAllCategories');
    const editCategoryCheckboxes = document.querySelectorAll('#editCouponModal .edit-category-checkbox');
    
    if (editAllCategories) {
      editAllCategories.addEventListener('change', function() {
        editCategoryCheckboxes.forEach(checkbox => {
          checkbox.disabled = this.checked;
          if (this.checked) checkbox.checked = false;
        });
      });
    }

    // Product checkbox functionality for Add Coupon Modal
    const addAllProducts = document.getElementById('addAllProducts');
    const addProductSearch = document.getElementById('addProductSearch');
    const addProductCheckboxes = document.querySelectorAll('#addCouponModal .product-checkbox');
    
    if (addAllProducts && addProductSearch) {
      addAllProducts.addEventListener('change', function() {
        addProductSearch.disabled = this.checked;
        addProductCheckboxes.forEach(checkbox => {
          checkbox.disabled = this.checked;
          if (this.checked) checkbox.checked = false;
        });
      });

      addProductSearch.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        addProductCheckboxes.forEach(checkbox => {
          const label = checkbox.nextElementSibling.textContent.toLowerCase();
          const parent = checkbox.parentElement;
          parent.style.display = label.includes(searchTerm) ? 'block' : 'none';
        });
      });
    }

    // Product checkbox functionality for Edit Coupon Modal
    const editAllProducts = document.getElementById('editAllProducts');
    const editProductSearch = document.getElementById('editProductSearch');
    const editProductCheckboxes = document.querySelectorAll('#editCouponModal .edit-product-checkbox');
    
    if (editAllProducts && editProductSearch) {
      editAllProducts.addEventListener('change', function() {
        editProductSearch.disabled = this.checked;
        editProductCheckboxes.forEach(checkbox => {
          checkbox.disabled = this.checked;
          if (this.checked) checkbox.checked = false;
        });
      });

      editProductSearch.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        editProductCheckboxes.forEach(checkbox => {
          const label = checkbox.nextElementSibling.textContent.toLowerCase();
          const parent = checkbox.parentElement;
          parent.style.display = label.includes(searchTerm) ? 'block' : 'none';
        });
      });
    }

    // Debounce function
    function debounce(func, delay) {
      let timeoutId;
      return function (...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(this, args), delay);
      };
    }

    // Search functionality with debouncing
    const couponSearch = document.getElementById('couponSearch');
    const debouncedSearch = debounce(function(searchTerm) {
      const url = new URL(window.location.href);
      url.searchParams.set('search', searchTerm);
      url.searchParams.set('page', 1);
      window.location.href = url.toString();
    }, 500);

    couponSearch.addEventListener('input', function() {
      debouncedSearch(this.value.toLowerCase());
    });

    // Filter functionality
    const statusFilter = document.getElementById('statusFilter');
    const typeFilter = document.getElementById('typeFilter');
    
    statusFilter.addEventListener('change', applyFilters);
    typeFilter.addEventListener('change', applyFilters);
    
    function applyFilters() {
      const url = new URL(window.location.href);
      url.searchParams.set('status', statusFilter.value);
      url.searchParams.set('type', typeFilter.value);
      url.searchParams.set('page', 1);
      window.location.href = url.toString();
    }

    // Toggle status functionality
    document.querySelectorAll('.btn-toggle-status').forEach(button => {
      button.addEventListener('click', function() {
        const couponId = this.getAttribute('data-coupon-id');
        const action = this.querySelector('i').classList.contains('ri-eye-off-line') ? 'deactivate' : 'activate';

        Swal.fire({
          title: 'Are you sure?',
          text: `Do you want to ${action} this coupon?`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: `Yes, ${action} it!`
        }).then((result) => {
          if (result.isConfirmed) {
            fetch(`/admin/coupons/${couponId}/toggle-status`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                const fullActionText = action === 'activate' ? 'activated' : 'deactivated';
                Swal.fire(
                  `${fullActionText.charAt(0).toUpperCase() + fullActionText.slice(1)}!`,
                  `Coupon has been ${fullActionText}.`,
                  'success'
                ).then(() => {
                  window.location.reload();
                });
              } else {
                Swal.fire('Error!', data.message, 'error');
              }
            })
            .catch(error => {
              Swal.fire('Error!', 'Failed to toggle coupon status.', 'error');
            });
          }
        });
      });
    });

    // View coupon details
    document.querySelectorAll('.btn-view-details').forEach(button => {
      button.addEventListener('click', function() {
        const couponId = this.getAttribute('data-coupon-id');
        fetch(`/admin/coupons/${couponId}`)
          .then(response => response.json())
          .then(coupon => {
            document.getElementById('viewCouponModalLabel').textContent = `Coupon Details: ${coupon.code}`;
            document.getElementById('viewCouponCode').textContent = coupon.code;
            document.getElementById('viewCouponDescription').textContent = coupon.description || 'N/A';
            document.getElementById('viewCouponDiscount').textContent = coupon.discountType === 'percentage' 
              ? `${coupon.discountValue}% (Maximum ₹${coupon.maxDiscountValue || 'Unlimited'})` 
              : `₹${coupon.discountValue} Off`;
            document.getElementById('viewMinOrderAmount').textContent = `₹${coupon.minOrderAmount}`;
            document.getElementById('viewStartDate').textContent = new Date(coupon.startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
            document.getElementById('viewExpiryDate').textContent = new Date(coupon.expiryDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
            document.getElementById('viewUsage').textContent = `${coupon.usedCount} used / ${coupon.usageLimitGlobal || 'Unlimited'} total`;
            document.getElementById('viewUsageLimitPerUser').textContent = `${coupon.usageLimitPerUser} use${coupon.usageLimitPerUser > 1 ? 's' : ''} per user`;
            
            const isExpired = new Date(coupon.expiryDate) < new Date();
            const status = isExpired ? 'expired' : (coupon.isActive ? 'active' : 'inactive');
            document.getElementById('viewStatus').innerHTML = `<span class="status-badge ${status}">${status.charAt(0).toUpperCase() + status.slice(1)}</span>`;
            
            let appliesTo = [];
            if (coupon.applicableCategories.length === 0 && coupon.applicableProducts.length === 0) {
              appliesTo.push('All Categories & Products');
            } else {
              if (coupon.applicableCategories.length > 0) {
                appliesTo.push(`${coupon.applicableCategories.length} Categories`);
              }
              if (coupon.applicableProducts.length > 0) {
                appliesTo.push(`${coupon.applicableProducts.length} Products`);
              }
            }
            document.getElementById('viewAppliesTo').textContent = appliesTo.join(', ');
            
            document.getElementById('viewCreatedAt').textContent = new Date(coupon.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });

            // Store coupon ID for edit button
            document.querySelector('.btn-edit-from-view').setAttribute('data-coupon-id', couponId);
          })
          .catch(error => {
            Swal.fire('Error!', 'Failed to load coupon details.', 'error');
          });
      });
    });

    // Edit coupon - Populate form
    document.querySelectorAll('.btn-edit-coupon, .btn-edit-from-view').forEach(button => {
      button.addEventListener('click', function() {
        const couponId = this.getAttribute('data-coupon-id');
        fetch(`/admin/coupons/${couponId}`)
          .then(response => response.json())
          .then(coupon => {
            document.getElementById('editCouponModalLabel').textContent = `Edit Coupon: ${coupon.code}`;
            document.getElementById('editCouponId').value = coupon._id;
            document.getElementById('editCouponCode').value = coupon.code;
            document.getElementById('editCouponStatus').value = coupon.isActive.toString();
            document.getElementById('editCouponDescription').value = coupon.description || '';
            document.getElementById('editDiscountType').value = coupon.discountType;
            document.getElementById('editDiscountValue').value = coupon.discountValue;
            
            if (coupon.discountType === 'percentage') {
              editDiscountSymbol.textContent = '%';
              editPercentageOptions.style.display = 'flex';
              document.getElementById('editMaxDiscountValue').value = coupon.maxDiscountValue || '';
            } else {
              editDiscountSymbol.textContent = '₹';
              editPercentageOptions.style.display = 'none';
            }

            document.getElementById('editMinOrderAmount').value = coupon.minOrderAmount;
            document.getElementById('editStartDate').value = new Date(coupon.startDate).toISOString().split('T')[0];
            document.getElementById('editExpiryDate').value = new Date(coupon.expiryDate).toISOString().split('T')[0];
            document.getElementById('editUsageLimitGlobal').value = coupon.usageLimitGlobal || '';
            document.getElementById('editUsageLimitPerUser').value = coupon.usageLimitPerUser;

            // Categories
            if (coupon.applicableCategories.length === 0) {
              editAllCategories.checked = true;
              editCategoryCheckboxes.forEach(checkbox => {
                checkbox.disabled = true;
                checkbox.checked = false;
              });
            } else {
              editAllCategories.checked = false;
              editCategoryCheckboxes.forEach(checkbox => {
                checkbox.disabled = false;
                checkbox.checked = coupon.applicableCategories.includes(checkbox.value);
              });
            }

            // Products
            if (coupon.applicableProducts.length === 0) {
              editAllProducts.checked = true;
              editProductSearch.disabled = true;
              editProductCheckboxes.forEach(checkbox => {
                checkbox.disabled = true;
                checkbox.checked = false;
              });
            } else {
              editAllProducts.checked = false;
              editProductSearch.disabled = false;
              editProductCheckboxes.forEach(checkbox => {
                checkbox.disabled = false;
                checkbox.checked = coupon.applicableProducts.includes(checkbox.value);
              });
            }
          })
          .catch(error => {
            Swal.fire('Error!', 'Failed to load coupon for editing.', 'error');
          });
      });
    });

    // Create coupon
    document.getElementById('createCouponBtn').addEventListener('click', function() {
      const form = document.getElementById('addCouponForm');
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }

      const couponData = {
        code: document.getElementById('couponCode').value.toUpperCase(),
        isActive: document.getElementById('couponStatus').value === 'true',
        description: document.getElementById('couponDescription').value,
        discountType: document.getElementById('discountType').value,
        discountValue: parseFloat(document.getElementById('discountValue').value),
        maxDiscountValue: document.getElementById('discountType').value === 'percentage' && document.getElementById('maxDiscountValue').value 
          ? parseFloat(document.getElementById('maxDiscountValue').value) 
          : null,
        minOrderAmount: parseFloat(document.getElementById('minOrderAmount').value) || 0,
        startDate: new Date(document.getElementById('startDate').value),
        expiryDate: new Date(document.getElementById('expiryDate').value),
        usageLimitGlobal: document.getElementById('usageLimitGlobal').value 
          ? parseInt(document.getElementById('usageLimitGlobal').value) 
          : null,
        usageLimitPerUser: parseInt(document.getElementById('usageLimitPerUser').value) || 1,
        applicableCategories: addAllCategories.checked 
          ? [] 
          : Array.from(addCategoryCheckboxes)
              .filter(checkbox => checkbox.checked)
              .map(checkbox => checkbox.value),
        applicableProducts: addAllProducts.checked 
          ? [] 
          : Array.from(addProductCheckboxes)
              .filter(checkbox => checkbox.checked)
              .map(checkbox => checkbox.value),
      };

      fetch('/admin/coupons', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(couponData),
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            title: 'Success!',
            text: 'Coupon created successfully.',
            icon: 'success',
            confirmButtonColor: '#3085d6',
          }).then(() => {
            window.location.reload();
          });
        } else {
          Swal.fire('Error!', data.message, 'error');
        }
      })
      .catch(error => {
        Swal.fire('Error!', 'Failed to create coupon.', 'error');
      });
    });

    // Update coupon
    document.getElementById('updateCouponBtn').addEventListener('click', function() {
      const form = document.getElementById('editCouponForm');
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }

      const couponId = document.getElementById('editCouponId').value;
      const couponData = {
        code: document.getElementById('editCouponCode').value.toUpperCase(),
        isActive: document.getElementById('editCouponStatus').value === 'true',
        description: document.getElementById('editCouponDescription').value,
        discountType: document.getElementById('editDiscountType').value,
        discountValue: parseFloat(document.getElementById('editDiscountValue').value),
        maxDiscountValue: document.getElementById('editDiscountType').value === 'percentage' && document.getElementById('editMaxDiscountValue').value 
          ? parseFloat(document.getElementById('editMaxDiscountValue').value) 
          : null,
        minOrderAmount: parseFloat(document.getElementById('editMinOrderAmount').value) || 0,
        startDate: new Date(document.getElementById('editStartDate').value),
        expiryDate: new Date(document.getElementById('editExpiryDate').value),
        usageLimitGlobal: document.getElementById('editUsageLimitGlobal').value 
          ? parseInt(document.getElementById('editUsageLimitGlobal').value) 
          : null,
        usageLimitPerUser: parseInt(document.getElementById('editUsageLimitPerUser').value) || 1,
        applicableCategories: editAllCategories.checked 
          ? [] 
          : Array.from(editCategoryCheckboxes)
              .filter(checkbox => checkbox.checked)
              .map(checkbox => checkbox.value),
        applicableProducts: editAllProducts.checked 
          ? [] 
          : Array.from(editProductCheckboxes)
              .filter(checkbox => checkbox.checked)
              .map(checkbox => checkbox.value),
      };

      fetch(`/admin/coupons/${couponId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(couponData),
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            title: 'Success!',
            text: 'Coupon updated successfully.',
            icon: 'success',
            confirmButtonColor: '#3085d6',
          }).then(() => {
            window.location.reload();
          });
        } else {
          Swal.fire('Error!', data.message, 'error');
        }
      })
      .catch(error => {
        Swal.fire('Error!', 'Failed to update coupon.', 'error');
      });
    });


    // Fix for both the HTML template issue and JavaScript logic

// First, find all the icon elements and fix them immediately
document.addEventListener('DOMContentLoaded', function() {
  // Fix the existing icons
  document.querySelectorAll('.btn-toggle-status').forEach(button => {
    const iconElement = button.querySelector('i');
    const rowElement = button.closest('tr');
    const statusElement = rowElement.querySelector('.status-badge');
    
    // Check if the coupon is active based on the status badge
    const isActive = statusElement.classList.contains('active');
    
    // Fix the icon class - eye for active, eye-off for inactive
    if (isActive) {
      // If active, should show eye icon (so user can click to deactivate)
      iconElement.className = 'ri-eye-line';
      button.setAttribute('title', 'Deactivate');
    } else {
      // If inactive, should show eye-off icon (so user can click to activate)
      iconElement.className = 'ri-eye-off-line';
      button.setAttribute('title', 'Activate');
    }
  });
  
  // Fix the toggle status event handler
  document.querySelectorAll('.btn-toggle-status').forEach(button => {
    // Remove any existing event listeners
    const newButton = button.cloneNode(true);
    button.parentNode.replaceChild(newButton, button);
    
    newButton.addEventListener('click', function() {
      const couponId = this.getAttribute('data-coupon-id');
      const iconElement = this.querySelector('i');
      
      // Determine action based on current icon
      const isCurrentlyActive = iconElement.classList.contains('ri-eye-line');
      const action = isCurrentlyActive ? 'deactivate' : 'activate';
      
      Swal.fire({
        title: 'Are you sure?',
        text: `Do you want to ${action} this coupon?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: `Yes, ${action} it!`
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/coupons/${couponId}/toggle-status`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              const fullActionText = action === 'activate' ? 'activated' : 'deactivated';
              Swal.fire(
                `${fullActionText.charAt(0).toUpperCase() + fullActionText.slice(1)}!`,
                `Coupon has been ${fullActionText}.`,
                'success'
              ).then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire('Error!', data.message, 'error');
            }
          })
          .catch(error => {
            Swal.fire('Error!', 'Failed to toggle coupon status.', 'error');
          });
        }
      });
    });
  });
});
    // Initialize Bootstrap tooltips
    const tooltipTriggerList = document.querySelectorAll('[title]');
    if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
      tooltipTriggerList.forEach(tooltipTriggerEl => {
        new bootstrap.Tooltip(tooltipTriggerEl);
      });
    }
  });


  
</script>
