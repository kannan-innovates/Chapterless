<%- include('../partials/admin/sidebar') %>
<div class="main-content">
  <div class="page-header d-flex justify-content-between align-items-center">
    <div>
      <h1 class="page-title"><%= title || 'Manage Offers' %></h1>
      <p class="text-muted mb-0">View and manage special offers and discounts</p>
    </div>
    <div class="d-flex align-items-center">
      <div class="search-container me-3 d-flex align-items-center">
        <i class="ri-search-line search-icon"></i>
        <input type="text" id="offerSearch" class="search-input" placeholder="Search offers..." value="<%= filters.search %>">
        <% if (filters.search) { %>
          <button type="button" id="clearSearchBtn" class="btn-icon ms-1" title="Clear Search">
            <i class="ri-close-line"></i>
          </button>
        <% } %>
      </div>
      <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addOfferModal">
        <i class="ri-add-line me-1"></i> Add New Offer
      </button>
      <button class="toggle-sidebar d-lg-none ms-2">
        <i class="ri-menu-line"></i>
      </button>
    </div>
  </div>

  <!-- Offer Filters -->
  <form id="filterForm" method="GET" action="/admin/offers">
    <div class="filters-container mb-3">
      <div class="d-flex flex-wrap gap-2">
        <select class="form-select filter-select" name="status" id="statusFilter" onchange="this.form.submit()">
          <option value="all" <%= filters.status === 'all' ? 'selected' : '' %>>All Status</option>
          <option value="active" <%= filters.status === 'active' ? 'selected' : '' %>>Active</option>
          <option value="inactive" <%= filters.status === 'inactive' ? 'selected' : '' %>>Inactive</option>
          <option value="expired" <%= filters.status === 'expired' ? 'selected' : '' %>>Expired</option>
        </select>
        <select class="form-select filter-select" name="type" id="typeFilter" onchange="this.form.submit()">
          <option value="all" <%= filters.type === 'all' ? 'selected' : '' %>>All Types</option>
          <option value="percentage" <%= filters.type === 'percentage' ? 'selected' : '' %>>Percentage</option>
          <option value="fixed" <%= filters.type === 'fixed' ? 'selected' : '' %>>Fixed Amount</option>
        </select>
        
        <select class="form-select filter-select" name="application" id="applicationFilter" onchange="this.form.submit()">
          <option value="all" <%= filters.application === 'all' ? 'selected' : '' %>>All Applications</option>
          <option value="all_products" <%= filters.application === 'all_products' ? 'selected' : '' %>>All Products</option>
          <option value="specific_products" <%= filters.application === 'specific_products' ? 'selected' : '' %>>Specific Products</option>
          <option value="all_categories" <%= filters.application === 'all_categories' ? 'selected' : '' %>>All Categories</option>
          <option value="specific_categories" <%= filters.application === 'specific_categories' ? 'selected' : '' %>>Specific Categories</option>
        </select>

        <input type="hidden" name="search" id="hiddenSearchInput" value="<%= filters.search %>">
      </div>
    </div>
  </form>

  <!-- Offers Table Card -->
  <div class="content-card">
    <div class="table-responsive">
      <table class="offers-table" id="offersTable">
        <thead>
          <tr>
            <th>Title</th>
            <th>Discount</th>
            <th>Applicable On</th>
            <th>Validity</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% if (typeof offers !== 'undefined' && offers && offers.length > 0) { %>
            <% offers.forEach(offer => { %>
              <tr data-offer-id="<%= offer._id %>">
                <td class="offer-title"><%= offer.title %></td>
                <td>
                  <%= offer.discountValue %><%= offer.discountType === 'percentage' ? '%' : '₹' %> Off
                </td>
                <td>
                  <%= offer.appliesToDisplay %>
                </td>
                <td>
                  <div class="validity-dates">
                    <div>From: <span><%= offer.displayStartDate %></span></div>
                    <div>To: <span><%= offer.displayEndDate %></span></div>
                  </div>
                </td>
                <td>
                  <span class="status-badge <%= offer.statusClass %>"><%= offer.currentStatus %></span>
                </td>
                <td>
                  <div class="action-buttons">
                    <button class="btn-icon btn-edit-offer" data-offer-id="<%= offer._id %>" title="Edit">
                      <i class="ri-pencil-line"></i>
                    </button>
                    <button class="btn-icon btn-toggle-status" data-offer-id="<%= offer._id %>"
                        title="<%= offer.currentStatus === 'Active' ? 'Deactivate' : 'Activate' %>">
                      <i class="<%= offer.currentStatus === 'Active' ? 'ri-eye-off-line' : 'ri-eye-line' %>"></i>
                    </button>
                    <button class="btn-icon btn-view-details" data-offer-id="<%= offer._id %>" title="View Details">
                      <i class="ri-information-line"></i>
                    </button>
                  </div>
                </td>
              </tr>
            <% }) %>
          <% } else { %>
            <tr>
              <td colspan="6" class="text-center py-4">No offers found matching your criteria.</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <!-- Pagination -->
    <% if (typeof pagination !== 'undefined' && pagination && pagination.totalPages > 0) { %>
    <div class="d-flex justify-content-between align-items-center p-3">
      <div class="text-muted small">
        Showing <%= pagination.start %>-<%= pagination.end %> of <%= pagination.totalOffers %> offers
      </div>
      <nav aria-label="Offer pagination">
        <ul class="pagination mb-0">
          <li class="page-item <%= !pagination.hasPrev ? 'disabled' : '' %>">
            <a class="page-link" href="?page=<%= pagination.prevPage %>&status=<%= filters.status %>&type=<%= filters.type %>&application=<%= filters.application %>&search=<%= filters.search %>" aria-label="Previous">
              <span aria-hidden="true">«</span>
            </a>
          </li>
          <% pagination.pages.forEach(p => { %>
            <li class="page-item <%= p === pagination.currentPage ? 'active' : '' %>">
              <a class="page-link" href="?page=<%= p %>&status=<%= filters.status %>&type=<%= filters.type %>&application=<%= filters.application %>&search=<%= filters.search %>"><%= p %></a>
            </li>
          <% }) %>
          <li class="page-item <%= !pagination.hasNext ? 'disabled' : '' %>">
            <a class="page-link" href="?page=<%= pagination.nextPage %>&status=<%= filters.status %>&type=<%= filters.type %>&application=<%= filters.application %>&search=<%= filters.search %>" aria-label="Next">
              <span aria-hidden="true">»</span>
            </a>
          </li>
        </ul>
      </nav>
    </div>
    <% } %>
  </div>
</div>

<!-- Add Offer Modal -->
<div class="modal fade" id="addOfferModal" tabindex="-1" aria-labelledby="addOfferModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addOfferModalLabel">Add New Offer</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addOfferForm" novalidate>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addOfferTitle" class="form-label">Offer Title*</label>
              <input type="text" class="form-control" id="addOfferTitle" name="title" placeholder="e.g. Summer Sale" required maxlength="100">
              <div class="invalid-feedback">Please provide a valid offer title.</div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addOfferStatus" class="form-label">Initial Status</label>
              <select class="form-select" id="addOfferStatus" name="isActive">
                <option value="true" selected>Active</option>
                <option value="false">Inactive</option>
              </select>
            </div>
          </div>

          <div class="mb-3">
            <label for="addOfferDescription" class="form-label">Description</label>
            <textarea class="form-control" id="addOfferDescription" name="description" rows="2" placeholder="Brief description of the offer" maxlength="500"></textarea>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addDiscountType" class="form-label">Discount Type*</label>
              <select class="form-select" id="addDiscountType" name="discountType" required>
                <option value="percentage">Percentage Discount</option>
                <option value="fixed">Fixed Amount Discount</option>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addDiscountValue" class="form-label">Discount Value*</label>
              <div class="input-group">
                <span class="input-group-text add-discount-symbol">%</span>
                <input type="number" class="form-control" id="addDiscountValue" name="discountValue" min="0.01" step="0.01" required>
                <div class="invalid-feedback">Please provide a valid discount value.</div>
              </div>
            </div>
          </div>
          
          <div class="mb-3">
            <label for="addAppliesTo" class="form-label">Offer Applies To*</label>
            <select class="form-select" id="addAppliesTo" name="appliesTo" required>
              <option value="all_products" selected>All Products</option>
              <option value="specific_products">Specific Products</option>
              <option value="all_categories">All Categories</option>
              <option value="specific_categories">Specific Categories</option>
            </select>
          </div>

          <!-- Specific Products Selector -->
          <div class="mb-3 add-specific-products-container d-none">
            <label class="form-label">Applicable Products*</label>
            <div class="products-container p-2 border rounded">
              <div class="product-search mb-2">
                <input type="text" class="form-control form-control-sm" id="addProductSearch" placeholder="Search products...">
              </div>
              <div class="product-checkboxes" id="addProductCheckboxes" style="max-height: 150px; overflow-y: auto;">
                <% if (products && products.length > 0) { %>
                  <% products.forEach(product => { %>
                    <div class="form-check">
                      <input class="form-check-input product-checkbox" type="checkbox" name="applicableProducts" value="<%= product._id %>" id="addProduct_<%= product._id %>">
                      <label class="form-check-label" for="addProduct_<%= product._id %>">
                        <%= product.title %>
                      </label>
                    </div>
                  <% }) %>
                <% } else { %>
                  <div class="text-muted fst-italic small">No products available.</div>
                <% } %>
              </div>
            </div>
          </div>

          <!-- Specific Categories Selector -->
          <div class="mb-3 add-specific-categories-container d-none">
            <label class="form-label">Applicable Categories*</label>
            <div class="categories-container p-2 border rounded" style="max-height: 150px; overflow-y: auto;">
              <% if (categories && categories.length > 0) { %>
                <% categories.forEach(category => { %>
                  <div class="form-check">
                    <input class="form-check-input category-checkbox" type="checkbox" name="applicableCategories" value="<%= category._id %>" id="addCategory_<%= category._id %>">
                    <label class="form-check-label" for="addCategory_<%= category._id %>">
                      <%= category.name %>
                    </label>
                  </div>
                <% }) %>
              <% } else { %>
                <div class="text-muted fst-italic small">No categories available.</div>
              <% } %>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="addStartDate" class="form-label">Start Date*</label>
              <input type="date" class="form-control" id="addStartDate" name="startDate" required>
              <div class="invalid-feedback">Please provide a valid start date.</div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="addEndDate" class="form-label">End Date*</label>
              <input type="date" class="form-control" id="addEndDate" name="endDate" required>
              <div class="invalid-feedback">Please provide a valid end date.</div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="createOfferBtn">
          <span class="btn-text">Create Offer</span>
          <span class="btn-spinner spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Offer Modal -->
<div class="modal fade" id="editOfferModal" tabindex="-1" aria-labelledby="editOfferModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editOfferModalLabel">Edit Offer</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editOfferForm" novalidate>
          <input type="hidden" id="editOfferId" name="offerId">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editOfferTitle" class="form-label">Offer Title*</label>
              <input type="text" class="form-control" id="editOfferTitle" name="title" required maxlength="100">
              <div class="invalid-feedback">Please provide a valid offer title.</div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editOfferStatus" class="form-label">Status</label>
              <select class="form-select" id="editOfferStatus" name="isActive">
                <option value="true">Active</option>
                <option value="false">Inactive</option>
              </select>
            </div>
          </div>
          
          <div class="mb-3">
            <label for="editOfferDescription" class="form-label">Description</label>
            <textarea class="form-control" id="editOfferDescription" name="description" rows="2" maxlength="500"></textarea>
          </div>
          
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editDiscountType" class="form-label">Discount Type*</label>
              <select class="form-select" id="editDiscountType" name="discountType" required>
                <option value="percentage">Percentage Discount</option>
                <option value="fixed">Fixed Amount Discount</option>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editDiscountValue" class="form-label">Discount Value*</label>
              <div class="input-group">
                <span class="input-group-text edit-discount-symbol">%</span>
                <input type="number" class="form-control" id="editDiscountValue" name="discountValue" min="0.01" step="0.01" required>
                <div class="invalid-feedback">Please provide a valid discount value.</div>
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label for="editAppliesTo" class="form-label">Offer Applies To*</label>
            <select class="form-select" id="editAppliesTo" name="appliesTo" required>
              <option value="all_products">All Products</option>
              <option value="specific_products">Specific Products</option>
              <option value="all_categories">All Categories</option>
              <option value="specific_categories">Specific Categories</option>
            </select>
          </div>

          <!-- Specific Products Selector for Edit -->
          <div class="mb-3 edit-specific-products-container d-none">
            <label class="form-label">Applicable Products*</label>
            <div class="products-container p-2 border rounded">
              <div class="product-search mb-2">
                <input type="text" class="form-control form-control-sm" id="editProductSearch" placeholder="Search products...">
              </div>
              <div class="product-checkboxes" id="editProductCheckboxes" style="max-height: 150px; overflow-y: auto;">
                <% if (products && products.length > 0) { %>
                  <% products.forEach(product => { %>
                    <div class="form-check">
                      <input class="form-check-input edit-product-checkbox" type="checkbox" name="applicableProducts" value="<%= product._id %>" id="editProduct_<%= product._id %>">
                      <label class="form-check-label" for="editProduct_<%= product._id %>">
                        <%= product.title %>
                      </label>
                    </div>
                  <% }) %>
                <% } else { %>
                  <div class="text-muted fst-italic small">No products available.</div>
                <% } %>
              </div>
            </div>
          </div>

          <!-- Specific Categories Selector for Edit -->
          <div class="mb-3 edit-specific-categories-container d-none">
            <label class="form-label">Applicable Categories*</label>
            <div class="categories-container p-2 border rounded" style="max-height: 150px; overflow-y: auto;">
              <% if (categories && categories.length > 0) { %>
                <% categories.forEach(category => { %>
                  <div class="form-check">
                    <input class="form-check-input edit-category-checkbox" type="checkbox" name="applicableCategories" value="<%= category._id %>" id="editCategory_<%= category._id %>">
                    <label class="form-check-label" for="editCategory_<%= category._id %>">
                      <%= category.name %>
                    </label>
                  </div>
                <% }) %>
              <% } else { %>
                <div class="text-muted fst-italic small">No categories available.</div>
              <% } %>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editStartDate" class="form-label">Start Date*</label>
              <input type="date" class="form-control" id="editStartDate" name="startDate" required>
              <div class="invalid-feedback">Please provide a valid start date.</div>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editEndDate" class="form-label">End Date*</label>
              <input type="date" class="form-control" id="editEndDate" name="endDate" required>
              <div class="invalid-feedback">Please provide a valid end date.</div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="updateOfferBtn">
          <span class="btn-text">Update Offer</span>
          <span class="btn-spinner spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
        </button>
      </div>
    </div>
  </div>
</div>

<!-- View Offer Details Modal -->
<div class="modal fade" id="viewOfferModal" tabindex="-1" aria-labelledby="viewOfferModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="viewOfferModalLabel">Offer Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="offer-details">
          <div class="detail-row">
            <div class="detail-label">Title:</div>
            <div class="detail-value" id="viewOfferTitle"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Description:</div>
            <div class="detail-value" id="viewOfferDescription"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Discount:</div>
            <div class="detail-value" id="viewOfferDiscount"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Applies To:</div>
            <div class="detail-value" id="viewAppliesTo"></div>
          </div>
          <div id="viewApplicableItemsContainer">
            <!-- Content will be dynamically added here -->
          </div>
          <div class="detail-row">
            <div class="detail-label">Valid From:</div>
            <div class="detail-value" id="viewStartDate"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Valid Until:</div>
            <div class="detail-value" id="viewEndDate"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Status:</div>
            <div class="detail-value" id="viewStatus"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Created On:</div>
            <div class="detail-value" id="viewCreatedAt"></div>
          </div>
           <div class="detail-row">
            <div class="detail-label">Last Updated:</div>
            <div class="detail-value" id="viewUpdatedAt"></div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary btn-edit-from-view" data-offer-id="">Edit</button>
      </div>
    </div>
  </div>
</div>

<style>
  /* Additional CSS for the Offers page */
  .main-content {
    padding: 24px;
    margin-left: 260px;
    transition: margin-left 0.3s;
  }
  
  @media (max-width: 992px) {
    .main-content {
      margin-left: 0;
    }
  }
  
  .page-title {
    font-weight: 600;
    font-size: 1.5rem;
    margin-bottom: 5px;
  }
  
  .content-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
  }
  
  .search-container {
    position: relative;
  }
  
  .search-icon {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: #6c757d;
    z-index: 1;
  }
  
  .search-input {
    padding: 8px 10px 8px 35px; 
    border-radius: 6px;
    border: 1px solid #ddd;
    width: 250px; 
  }

  #clearSearchBtn {
    padding: 5px 7px; 
    line-height: 1; 
    color: #6c757d;
    background-color: transparent;
    border: none;
  }
  #clearSearchBtn:hover {
    color: #dc3545; 
    background-color: #f8f9fa;
  }
  #clearSearchBtn i {
    font-size: 1rem; 
    vertical-align: middle;
  }
  
  .filter-select {
    width: auto;
    min-width: 150px;
  }
  
  .filters-container {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .offers-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .offers-table th, 
  .offers-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #eee;
    vertical-align: middle;
  }
  
  .offers-table th {
    background-color: #f8f9fa;
    font-weight: 600;
  }
  
  .offer-title {
    font-weight: 600;
  }
  
  .validity-dates {
    font-size: 13px;
  }
  .validity-dates div {
    line-height: 1.4;
  }
  
  .status-badge {
    display: inline-block;
    padding: 4px 10px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
    text-transform: capitalize;
  }
  
  .status-badge.active {
    background-color: #e1f7e1; 
    color: #28a745; 
  }
  
  .status-badge.inactive {
    background-color: #f8f9fa; 
    color: #6c757d; 
  }
  
  .status-badge.expired {
    background-color: #fff3cd; 
    color: #856404; 
  }
  .status-badge.upcoming {
    background-color: #d1ecf1; 
    color: #0c5460; 
  }
  
  .action-buttons {
    display: flex;
    gap: 5px;
  }
  
  .btn-icon {
    background: none;
    border: none;
    padding: 5px;
    cursor: pointer;
    color: #6c757d;
    border-radius: 4px;
    transition: all 0.2s;
  }
  
  .btn-icon:hover {
    background-color: #f0f0f0;
    color: #4361EE; 
  }
  .btn-icon i {
    font-size: 1.1rem;
  }
  
  .modal-title {
    font-weight: 600;
  }
  .modal-body .form-label {
    font-weight: 500;
  }
  
  .offer-details {
    padding: 10px;
  }
  
  .detail-row {
    display: flex;
    margin-bottom: 10px;
    border-bottom: 1px solid #f1f1f1;
    padding-bottom: 8px;
  }
  .detail-row:last-child {
    border-bottom: none;
    margin-bottom: 0;
    padding-bottom: 0;
  }
  
  .detail-label {
    width: 40%;
    font-weight: 500;
    color: #495057;
  }
  
  .detail-value {
    width: 60%;
  }
  #viewApplicableItemsContainer .detail-row {
    padding-left: 10px;
  }
   #viewApplicableItemsContainer .detail-label {
    width: 30%;
  }
   #viewApplicableItemsContainer .detail-value {
    width: 70%;
    max-height: 100px;
    overflow-y: auto;
  }

  .btn-spinner {
    margin-left: 8px;
  }

  .is-invalid {
    border-color: #dc3545;
  }

  .invalid-feedback {
    display: none;
    width: 100%;
    margin-top: 0.25rem;
    font-size: 0.875em;
    color: #dc3545;
  }

  .is-invalid ~ .invalid-feedback {
    display: block;
  }
  
  @media (max-width: 992px) {
    .search-input { width: 180px; }
    .filters-container { flex-direction: column; align-items: stretch; }
    .filter-select { width: 100%; }
  }
  
  @media (max-width: 768px) {
    .page-header { flex-direction: column; align-items: flex-start; }
    .page-header > div:last-child { margin-top: 15px; width: 100%; justify-content: space-between; }
    .search-container { flex-grow: 1; }
    .search-input { width: 100%; } 
    .page-header .btn-primary { margin-left: auto; }
  }
   @media (max-width: 576px) { 
    .page-header > div:last-child { flex-wrap: wrap; gap:10px }
    .search-container { width: 100%; margin-right:0 !important; margin-bottom: 10px }
    .page-header .btn-primary { width:100%; margin-left:0; }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Utility functions
    const showAlert = (icon, title, text = '') => {
        if (typeof Swal !== 'undefined') {
            Swal.fire({ 
                icon, 
                title, 
                text, 
                timer: 3000, 
                showConfirmButton: false, 
                toast: true, 
                position: 'top-end' 
            });
        } else {
            alert(`${title}${text ? ': ' + text : ''}`);
        }
    };

    const debounce = (func, delay) => {
        let timeout;
        return function(...args) {
            const context = this;
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(context, args), delay);
        };
    };

    const setButtonLoading = (button, loading) => {
        const btnText = button.querySelector('.btn-text');
        const btnSpinner = button.querySelector('.btn-spinner');
        
        if (loading) {
            button.disabled = true;
            if (btnText) btnText.style.display = 'none';
            if (btnSpinner) btnSpinner.classList.remove('d-none');
        } else {
            button.disabled = false;
            if (btnText) btnText.style.display = 'inline';
            if (btnSpinner) btnSpinner.classList.add('d-none');
        }
    };

    const clearFormValidation = (form) => {
        form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
    };

    // Improved validation function that doesn't trigger on edit modal load
    const validateForm = (formPrefix, isSubmission = false) => {
        const form = document.getElementById(`${formPrefix}OfferForm`);
        const titleInput = document.getElementById(`${formPrefix}OfferTitle`);
        const startDateInput = document.getElementById(`${formPrefix}StartDate`);
        const endDateInput = document.getElementById(`${formPrefix}EndDate`);
        const discountValueInput = document.getElementById(`${formPrefix}DiscountValue`);
        const discountTypeInput = document.getElementById(`${formPrefix}DiscountType`);
        const appliesToInput = document.getElementById(`${formPrefix}AppliesTo`);

        let isValid = true;

        // Only clear validation if this is a submission attempt
        if (isSubmission) {
            clearFormValidation(form);
        }

        // Title validation
        if (!titleInput.value.trim()) {
            if (isSubmission) {
                titleInput.classList.add('is-invalid');
                showAlert('error', 'Validation Error', 'Offer title is required');
            }
            isValid = false;
        }

        // Date validation
        if (!startDateInput.value) {
            if (isSubmission) {
                startDateInput.classList.add('is-invalid');
                showAlert('error', 'Validation Error', 'Start date is required');
            }
            isValid = false;
        }

        if (!endDateInput.value) {
            if (isSubmission) {
                endDateInput.classList.add('is-invalid');
                showAlert('error', 'Validation Error', 'End date is required');
            }
            isValid = false;
        }

        if (startDateInput.value && endDateInput.value) {
            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);
            
            if (startDate >= endDate) {
                if (isSubmission) {
                    endDateInput.classList.add('is-invalid');
                    showAlert('error', 'Validation Error', 'End date must be after start date');
                }
                isValid = false;
            }

            // Check if start date is in the past (only for new offers)
            if (formPrefix === 'add') {
                const now = new Date();
                now.setHours(0, 0, 0, 0);
                startDate.setHours(0, 0, 0, 0);
                
                if (startDate < now) {
                    if (isSubmission) {
                        startDateInput.classList.add('is-invalid');
                        showAlert('error', 'Validation Error', 'Start date cannot be in the past');
                    }
                    isValid = false;
                }
            }
        }

        // Discount value validation
        const discountValue = parseFloat(discountValueInput.value);
        if (isNaN(discountValue) || discountValue <= 0) {
            if (isSubmission) {
                discountValueInput.classList.add('is-invalid');
                showAlert('error', 'Validation Error', 'Valid discount value is required');
            }
            isValid = false;
        } else if (discountTypeInput.value === 'percentage' && (discountValue < 1 || discountValue > 100)) {
            if (isSubmission) {
                discountValueInput.classList.add('is-invalid');
                showAlert('error', 'Validation Error', 'Percentage discount must be between 1 and 100');
            }
            isValid = false;
        }

        // Specific selection validation
        if (appliesToInput.value === 'specific_products') {
            const selectedProducts = form.querySelectorAll('input[name="applicableProducts"]:checked');
            if (selectedProducts.length === 0) {
                if (isSubmission) {
                    showAlert('error', 'Validation Error', 'Please select at least one product');
                }
                isValid = false;
            }
        } else if (appliesToInput.value === 'specific_categories') {
            const selectedCategories = form.querySelectorAll('input[name="applicableCategories"]:checked');
            if (selectedCategories.length === 0) {
                if (isSubmission) {
                    showAlert('error', 'Validation Error', 'Please select at least one category');
                }
                isValid = false;
            }
        }

        return isValid;
    };

    // Search functionality
    const offerSearchInput = document.getElementById('offerSearch');
    const hiddenSearchInput = document.getElementById('hiddenSearchInput');
    const filterForm = document.getElementById('filterForm');
    const clearSearchBtn = document.getElementById('clearSearchBtn');

    const performSearch = () => {
        if (filterForm && hiddenSearchInput && offerSearchInput) {
            hiddenSearchInput.value = offerSearchInput.value.trim();
            filterForm.submit();
        }
    };

    const debouncedSearch = debounce(performSearch, 500);

    if (offerSearchInput && hiddenSearchInput && filterForm) {
        offerSearchInput.addEventListener('input', () => {
            if (offerSearchInput.value.trim() === '' && hiddenSearchInput.value !== '') {
                performSearch(); 
            } else if (offerSearchInput.value.trim() !== '') {
                debouncedSearch();
            }
        });

        offerSearchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') { 
                e.preventDefault(); 
                performSearch(); 
            }
        });
    }

    if (clearSearchBtn && offerSearchInput && hiddenSearchInput && filterForm) {
        clearSearchBtn.addEventListener('click', () => {
            offerSearchInput.value = '';
            hiddenSearchInput.value = '';
            filterForm.submit();
        });
    }
    
    // Setup discount type symbol
    function setupDiscountTypeSymbol(modalType) { 
        const discountTypeSelect = document.getElementById(`${modalType}DiscountType`);
        const discountSymbolSpan = document.querySelector(`.${modalType}-discount-symbol`);
        
        if (discountTypeSelect && discountSymbolSpan) {
            const updateSymbol = () => {
                discountSymbolSpan.textContent = discountTypeSelect.value === 'percentage' ? '%' : '₹';
            };
            discountTypeSelect.addEventListener('change', updateSymbol);
            updateSymbol(); 
        }
    }

    setupDiscountTypeSymbol('add');
    setupDiscountTypeSymbol('edit');

    // Setup applicability UI
    function setupApplicabilityUI(modalType) { 
        const appliesToSelect = document.getElementById(`${modalType}AppliesTo`);
        const specificProductsContainer = document.querySelector(`.${modalType}-specific-products-container`);
        const specificCategoriesContainer = document.querySelector(`.${modalType}-specific-categories-container`);
        const productSearchInput = document.getElementById(`${modalType}ProductSearch`);
        const productCheckboxesContainer = document.getElementById(`${modalType}ProductCheckboxes`);

        if (appliesToSelect) {
            const updateVisibility = () => {
                const value = appliesToSelect.value;
                if (specificProductsContainer) {
                    specificProductsContainer.classList.toggle('d-none', value !== 'specific_products');
                }
                if (specificCategoriesContainer) {
                    specificCategoriesContainer.classList.toggle('d-none', value !== 'specific_categories');
                }
            };
            appliesToSelect.addEventListener('change', updateVisibility);
            updateVisibility(); 
        }

        if (productSearchInput && productCheckboxesContainer) {
            productSearchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const checkboxes = productCheckboxesContainer.querySelectorAll('.form-check');
                checkboxes.forEach(div => {
                    const label = div.querySelector('label').textContent.toLowerCase();
                    div.style.display = label.includes(searchTerm) ? '' : 'none';
                });
            });
        }
    }

    setupApplicabilityUI('add');
    setupApplicabilityUI('edit');

    // Add Offer Modal
    const addOfferModalEl = document.getElementById('addOfferModal');
    const addOfferModal = addOfferModalEl ? new bootstrap.Modal(addOfferModalEl) : null;
    const createOfferBtn = document.getElementById('createOfferBtn');
    const addOfferForm = document.getElementById('addOfferForm');

    if (createOfferBtn && addOfferForm && addOfferModal) {
        createOfferBtn.addEventListener('click', async function() {
            if (!validateForm('add', true)) {
                return;
            }
            
            setButtonLoading(this, true);

            const formData = new FormData(addOfferForm);
            const data = {};
            
            formData.forEach((value, key) => {
                if (key === 'applicableProducts' || key === 'applicableCategories') {
                    if (!data[key]) data[key] = [];
                    data[key].push(value);
                } else {
                    data[key] = value;
                }
            });

            if (data.appliesTo !== 'specific_products') delete data.applicableProducts;
            if (data.appliesTo !== 'specific_categories') delete data.applicableCategories;

            try {
                const response = await fetch('/admin/offers', {
                    method: 'POST', 
                    headers: { 'Content-Type': 'application/json' }, 
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (response.ok && result.success) { 
                    showAlert('success', 'Success!', result.message); 
                    addOfferModal.hide(); 
                    setTimeout(() => window.location.reload(), 1500);
                } else { 
                    showAlert('error', 'Error', result.message || 'Could not create offer'); 
                }
            } catch (error) { 
                showAlert('error', 'Network Error', 'An unexpected error occurred'); 
                console.error('Add offer error:', error); 
            } finally {
                setButtonLoading(this, false);
            }
        });
    }

    if (addOfferModalEl && addOfferForm) {
        addOfferModalEl.addEventListener('hidden.bs.modal', () => {
            addOfferForm.reset();
            clearFormValidation(addOfferForm);
            
            // Reset to defaults
            const addAppliesTo = document.getElementById('addAppliesTo');
            if(addAppliesTo) { 
                addAppliesTo.value = 'all_products'; 
                addAppliesTo.dispatchEvent(new Event('change')); 
            }
            
            const addDiscountType = document.getElementById('addDiscountType');
            if(addDiscountType) { 
                addDiscountType.value = 'percentage'; 
                addDiscountType.dispatchEvent(new Event('change')); 
            }
        });
    }

    // Edit Offer Modal
    const editOfferModalElement = document.getElementById('editOfferModal');
    const editOfferModal = editOfferModalElement ? new bootstrap.Modal(editOfferModalElement) : null;
    const editOfferForm = document.getElementById('editOfferForm');
    const updateOfferBtn = document.getElementById('updateOfferBtn');

    document.querySelectorAll('.btn-edit-offer').forEach(button => {
        button.addEventListener('click', async function() {
            const offerId = this.getAttribute('data-offer-id');
            if (!editOfferForm || !editOfferModal) return;
            
            document.getElementById('editOfferId').value = offerId;
            
            // Clear any existing validation errors before loading data
            clearFormValidation(editOfferForm);
            
            try {
                const response = await fetch(`/admin/offers/${offerId}`);
                if (!response.ok) {
                    const errData = await response.json().catch(() => ({
                        message: `Failed to load offer data. Status: ${response.status}`
                    }));
                    throw new Error(errData.message);
                }
                
                const offer = await response.json();

                // Populate form fields without triggering validation
                document.getElementById('editOfferTitle').value = offer.title || '';
                document.getElementById('editOfferStatus').value = String(offer.isActive);
                document.getElementById('editOfferDescription').value = offer.description || '';
                document.getElementById('editDiscountType').value = offer.discountType || 'percentage';
                document.getElementById('editDiscountValue').value = offer.discountValue || '';
                
                const editAppliesToSelect = document.getElementById('editAppliesTo');
                editAppliesToSelect.value = offer.appliesTo || 'all_products';
                editAppliesToSelect.dispatchEvent(new Event('change')); 

                // Clear all checkboxes first
                document.querySelectorAll('#editProductCheckboxes .edit-product-checkbox').forEach(cb => cb.checked = false);
                document.querySelectorAll('#editCategoryCheckboxes .edit-category-checkbox').forEach(cb => cb.checked = false);

                // Set selected items
                if (offer.appliesTo === 'specific_products' && offer.applicableProducts) {
                    offer.applicableProducts.forEach(p => {
                        const checkbox = document.getElementById(`editProduct_${p._id}`);
                        if (checkbox) checkbox.checked = true;
                    });
                } else if (offer.appliesTo === 'specific_categories' && offer.applicableCategories) {
                    offer.applicableCategories.forEach(c => {
                        const checkbox = document.getElementById(`editCategory_${c._id}`);
                        if (checkbox) checkbox.checked = true;
                    });
                }
                
                document.getElementById('editStartDate').value = offer.startDate || ''; 
                document.getElementById('editEndDate').value = offer.endDate || '';   
                document.getElementById('editDiscountType').dispatchEvent(new Event('change')); 
                
                editOfferModal.show();
            } catch (error) { 
                showAlert('error', 'Load Error', `Failed to load offer: ${error.message}`); 
                console.error('Edit load error:', error); 
            }
        });
    });

    if (updateOfferBtn && editOfferForm && editOfferModal) {
        updateOfferBtn.addEventListener('click', async function() {
            if (!validateForm('edit', true)) {
                return;
            }

            setButtonLoading(this, true);

            const offerId = document.getElementById('editOfferId').value;
            const formData = new FormData(editOfferForm);
            const data = {};
            
            formData.forEach((value, key) => {
                if (key === 'applicableProducts' || key === 'applicableCategories') {
                    if (!data[key]) data[key] = [];
                    data[key].push(value);
                } else {
                    data[key] = value;
                }
            });
            
            delete data.offerId; 

            if (data.appliesTo !== 'specific_products') delete data.applicableProducts;
            if (data.appliesTo !== 'specific_categories') delete data.applicableCategories;

            try {
                const response = await fetch(`/admin/offers/${offerId}`, {
                    method: 'PUT', 
                    headers: { 'Content-Type': 'application/json' }, 
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (response.ok && result.success) { 
                    showAlert('success', 'Success!', result.message); 
                    editOfferModal.hide(); 
                    setTimeout(() => window.location.reload(), 1500);
                } else { 
                    showAlert('error', 'Error', result.message || 'Could not update offer'); 
                }
            } catch (error) { 
                showAlert('error', 'Network Error', 'An unexpected error occurred'); 
                console.error('Update offer error:', error); 
            } finally {
                setButtonLoading(this, false);
            }
        });
    }

    if (editOfferModalElement) {
        editOfferModalElement.addEventListener('hidden.bs.modal', () => {
            clearFormValidation(editOfferForm);
        });
    }

    // View Offer Details Modal
    const viewOfferModalElement = document.getElementById('viewOfferModal');
    const viewOfferModal = viewOfferModalElement ? new bootstrap.Modal(viewOfferModalElement) : null;
    const btnEditFromView = document.querySelector('.btn-edit-from-view');

    document.querySelectorAll('.btn-view-details').forEach(button => {
        button.addEventListener('click', async function() {
            const offerId = this.getAttribute('data-offer-id');
            if (!viewOfferModal) return;
            
            if(btnEditFromView) btnEditFromView.setAttribute('data-offer-id', offerId);
            
            try {
                const response = await fetch(`/admin/offers/${offerId}`);
                if (!response.ok) {
                    const errData = await response.json().catch(() => ({
                        message: `Failed to load offer details. Status: ${response.status}`
                    }));
                    throw new Error(errData.message);
                }
                
                const offer = await response.json();
                const formatDate = (d) => d ? new Date(d).toLocaleDateString('en-GB', {
                    day:'2-digit',month:'short',year:'numeric'
                }) : 'N/A';
                
                document.getElementById('viewOfferTitle').textContent = offer.title || 'N/A';
                document.getElementById('viewOfferDescription').textContent = offer.description || 'N/A';
                document.getElementById('viewOfferDiscount').textContent = 
                    `${offer.discountValue||0}${offer.discountType==='percentage'?'%':'₹'} Off`;
                
                let appliesToText = 'N/A';
                switch(offer.appliesTo) {
                    case 'all_products': appliesToText = 'All Products'; break;
                    case 'specific_products': appliesToText = 'Specific Products'; break;
                    case 'all_categories': appliesToText = 'All Categories'; break;
                    case 'specific_categories': appliesToText = 'Specific Categories'; break;
                }
                document.getElementById('viewAppliesTo').textContent = appliesToText;

                const itemsContainer = document.getElementById('viewApplicableItemsContainer');
                itemsContainer.innerHTML = ''; 
                
                if (offer.appliesTo === 'specific_products' && offer.applicableProducts && offer.applicableProducts.length > 0) {
                    let productListHTML = '<div class="detail-label">Products:</div><div class="detail-value"><ul>';
                    offer.applicableProducts.forEach(p => { 
                        productListHTML += `<li>${p.title}</li>`; 
                    });
                    productListHTML += '</ul></div>';
                    const row = document.createElement('div');
                    row.className = 'detail-row';
                    row.innerHTML = productListHTML;
                    itemsContainer.appendChild(row);
                } else if (offer.appliesTo === 'specific_categories' && offer.applicableCategories && offer.applicableCategories.length > 0) {
                    let categoryListHTML = '<div class="detail-label">Categories:</div><div class="detail-value"><ul>';
                    offer.applicableCategories.forEach(c => { 
                        categoryListHTML += `<li>${c.name}</li>`; 
                    });
                    categoryListHTML += '</ul></div>';
                    const row = document.createElement('div');
                    row.className = 'detail-row';
                    row.innerHTML = categoryListHTML;
                    itemsContainer.appendChild(row);
                }

                document.getElementById('viewStartDate').textContent = formatDate(offer.startDate);
                document.getElementById('viewEndDate').textContent = formatDate(offer.endDate);
                
                const now = new Date(); 
                let sText, sClass;
                if(!offer.isActive) {
                    sText='Inactive';
                    sClass='inactive';
                } else if(new Date(offer.endDate)<now) {
                    sText='Expired';
                    sClass='expired';
                } else if(new Date(offer.startDate)>now) {
                    sText='Upcoming';
                    sClass='upcoming';
                } else {
                    sText='Active';
                    sClass='active';
                }
                
                document.getElementById('viewStatus').innerHTML = `<span class="status-badge ${sClass}">${sText}</span>`;
                document.getElementById('viewCreatedAt').textContent = formatDate(offer.createdAt);
                document.getElementById('viewUpdatedAt').textContent = formatDate(offer.updatedAt);
                
                viewOfferModal.show();
            } catch (error) { 
                showAlert('error', 'Load Error', `Failed to load offer details: ${error.message}`); 
                console.error('View details error:', error); 
            }
        });
    });

    if (btnEditFromView && viewOfferModal) {
        btnEditFromView.addEventListener('click', function() {
            const offerId = this.getAttribute('data-offer-id');
            viewOfferModal.hide(); 
            setTimeout(() => {
                const editBtnTable = document.querySelector(`.btn-edit-offer[data-offer-id="${offerId}"]`);
                if(editBtnTable) {
                    editBtnTable.click(); 
                } else {
                    showAlert('error', 'Error', 'Cannot initiate edit');
                }
            }, 150);
        });
    }

    // Toggle Offer Status
    async function performToggle(offerId, iconElement, buttonElement) {
        try {
            const response = await fetch(`/admin/offers/${offerId}/toggle-status`, { method: 'PUT' });
            const resData = await response.json();
            
            if (response.ok && resData.success) {
                showAlert('success', 'Success!', resData.message);
                
                const row = document.querySelector(`tr[data-offer-id="${offerId}"]`);
                if (!row) { 
                    window.location.reload(); 
                    return; 
                } 

                const statusBadge = row.querySelector('.status-badge');
                if(statusBadge) {
                    statusBadge.textContent = resData.currentStatus;
                    statusBadge.className = 'status-badge ' + (resData.currentStatus ? resData.currentStatus.toLowerCase() : 'inactive');
                }
                
                if (resData.currentStatus === 'Active' || resData.currentStatus === 'Upcoming') { 
                    if(iconElement) iconElement.className = 'ri-eye-off-line';
                    if(buttonElement) buttonElement.setAttribute('title', 'Deactivate');
                } else { 
                    if(iconElement) iconElement.className = 'ri-eye-line';
                    if(buttonElement) buttonElement.setAttribute('title', 'Activate');
                }
            } else { 
                showAlert('error', 'Error', resData.message || 'Could not toggle offer status'); 
            }
        } catch (error) { 
            showAlert('error', 'Network Error', 'An unexpected error occurred'); 
            console.error('Toggle status error:', error); 
        }
    }

    document.querySelectorAll('.btn-toggle-status').forEach(button => {
        button.addEventListener('click', async function() {
            const offerId = this.getAttribute('data-offer-id');
            const icon = this.querySelector('i');
            const actionText = this.getAttribute('title').toLowerCase();
            
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    title: `Confirm ${this.getAttribute('title')}`,
                    text: `Do you want to ${actionText} this offer?`,
                    icon: 'warning', 
                    showCancelButton: true, 
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33', 
                    confirmButtonText: `Yes, ${actionText} it!`
                }).then(async (result) => { 
                    if (result.isConfirmed) { 
                        await performToggle(offerId, icon, this); 
                    } 
                });
            } else { 
                if (confirm(`Do you want to ${actionText} this offer?`)) { 
                    await performToggle(offerId, icon, this); 
                } 
            }
        });
    });

    // Sidebar toggle
    const toggleSidebarBtn = document.querySelector('.toggle-sidebar');
    if (toggleSidebarBtn) {
        toggleSidebarBtn.addEventListener('click', function() {
            const sidebar = document.querySelector('.sidebar');
            if (sidebar) sidebar.classList.toggle('active');
        });
    }
});
</script>
